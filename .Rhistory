p <- p + geom_line(aes(group=id, color=factor(id))
p <- p + theme1
p <- p + scale_x_discrete(limits=c(1,2), labels=c("Pre-Test","Post-Test"))
p <- p + scale_y_continuous(limits=c(30,70),
breaks=seq(30,70, by=5))
# p <- p + facet_grid(.~group)
# p <- p + labs(list(
#   title="How often did you attend worship last year?",
#   x="Year of observation", y="Church attendance"))
p
plyr:rename(dsLong,c("variable"="time", "value"="outcome")
ds <- dsLong
plyr::rename(dsLong,c("variable"="time", "value"="outcome")
plyr::rename(dsLong,c("variable"="time", "value"="outcome"))
plyr::rename(dsLong,c("variable"="time", "value"="outcome"))
ds <- dsLong
ds
rm(list=ls(all=TRUE)) # clears environment
cat("\014") # clears console
library(dplyr)
library(plyr)
library(ggplot2)
library(reshape2)
# create a vector of data called Y containing numbers 4, 6, 5, 7, 8
Y <- c(4, 6, 5, 7, 8)
# at this moment Y is of class...
class(Y)
# we can make it a matrix using matric() function
Y <- matrix(Y,5,1,byrow=TRUE) # matrix (data,#rows,#columns,...)
# create six data vectors of length 5 , one for each person (i)
i1 <- c(1, 11,  11.5, 11.8, 10.3, 9.5)
i2 <- c(2, 9,    9.8,  9.7,  9.6, 9.3)
i3 <- c(3, 9,    7.8,  8.1,  9.1, 7.8)
i4 <- c(4, 6.8,  7.9,  7,    7.8, 6.8)
i5 <- c(5, 6.4,  6.2,  6.8,  7.1, 7.2)
i6 <- c(6, 4,    5.6,  4.5,  5.2, 6.8)
# combine
data <- cbind(i1, i2, i3, i4, i5, i6)
data
class(data)
X <- matrix(data,6,6, byrow=TRUE)
X
i <- paste0("i",1:6)
vars <- c("id",paste0("t",1:5))
X
rownames(X) <- i
X
colnames(X) <- vars
X
ds <- data.frame(X)
ds
dsLong <- reshape2::melt(ds, id.vars="id")
# sort for visual inspection
dsLong <- dsLong[order(dsLong$id, dsLong$variable),]
head(dsLong,12)
# tweak the datatset
dsLong$variable <- gsub(pattern="t", replacement='', x=dsLong$variable)
head(dsLong,12)
str(dsLong)
dsLong$variable <- as.integer(dsLong$variable)
str(dsLong)
plyr::rename(dsLong,c("variable"="time", "value"="outcome"))
ds <- dsLong
head(ds)1
head(ds)
rm(list=ls(all=TRUE)) # clears environment
cat("\014") # clears console
library(dplyr)
library(plyr)
library(ggplot2)
library(reshape2)
# create a vector of data called Y containing numbers 4, 6, 5, 7, 8
Y <- c(4, 6, 5, 7, 8)
# at this moment Y is of class...
class(Y)
# we can make it a matrix using matric() function
Y <- matrix(Y,5,1,byrow=TRUE) # matrix (data,#rows,#columns,...)
# create six data vectors of length 5 , one for each person (i)
i1 <- c(1, 11,  11.5, 11.8, 10.3, 9.5)
i2 <- c(2, 9,    9.8,  9.7,  9.6, 9.3)
i3 <- c(3, 9,    7.8,  8.1,  9.1, 7.8)
i4 <- c(4, 6.8,  7.9,  7,    7.8, 6.8)
i5 <- c(5, 6.4,  6.2,  6.8,  7.1, 7.2)
i6 <- c(6, 4,    5.6,  4.5,  5.2, 6.8)
# combine
data <- cbind(i1, i2, i3, i4, i5, i6)
data
class(data)
X <- matrix(data,6,6, byrow=TRUE)
X
i <- paste0("i",1:6)
vars <- c("id",paste0("t",1:5))
X
rownames(X) <- i
X
colnames(X) <- vars
X
ds <- data.frame(X)
ds
dsLong <- reshape2::melt(ds, id.vars="id")
# sort for visual inspection
dsLong <- dsLong[order(dsLong$id, dsLong$variable),]
head(dsLong,12)
# tweak the datatset
dsLong$variable <- gsub(pattern="t", replacement='', x=dsLong$variable)
head(dsLong,12)
str(dsLong)
dsLong$variable <- as.integer(dsLong$variable)
str(dsLong)
plyr::rename(dsLong,c("variable"="time", "value"="outcome"))
ds <- dsLong
head(ds)
dsLong <- plyr::rename(dsLong,c("variable"="time", "value"="outcome"))
ds <- dsLong
head(ds)
source("Scripts/Graphs/graphThemes.R")
# graph
p <- ggplot2::ggplot(ds,aes(x=time,y=outcome))
p <- p + geom_line(aes(group=id, color=factor(id))
p <- p + theme1
p <- p + scale_x_discrete(limits=c(1,2), labels=c("Pre-Test","Post-Test"))
p <- p + scale_y_continuous(limits=c(30,70),
breaks=seq(30,70, by=5))
# p <- p + facet_grid(.~group)
# p <- p + labs(list(
#   title="How often did you attend worship last year?",
#   x="Year of observation", y="Church attendance"))
p
head(ds)
source("Scripts/Graphs/graphThemes.R")
# graph
p <- ggplot2::ggplot(ds,aes(x=time,y=outcome))
p <- p + geom_line(aes(group=id))
p <- p + theme1
p <- p + scale_x_continuous(limits=c(1,6))
# p <- p + scale_y_continuous(limits=c(30,70),
#                             breaks=seq(30,70, by=5))
# p <- p + facet_grid(.~group)
# p <- p + labs(list(
#   title="How often did you attend worship last year?",
#   x="Year of observation", y="Church attendance"))
p
source("Scripts/Graphs/graphThemes.R")
# graph
p <- ggplot2::ggplot(ds,aes(x=time,y=outcome))
p <- p + geom_line(aes(group=id, color=factor(id)))
p <- p + theme1
p <- p + scale_x_continuous(limits=c(1,6))
# p <- p + scale_y_continuous(limits=c(30,70),
#                             breaks=seq(30,70, by=5))
# p <- p + facet_grid(.~group)
# p <- p + labs(list(
#   title="How often did you attend worship last year?",
#   x="Year of observation", y="Church attendance"))
p
source("Scripts/Graphs/graphThemes.R")
# graph
p <- ggplot2::ggplot(ds,aes(x=time,y=outcome))
p <- p + geom_line(aes(group=id, color=factor(id)))
p <- p + geom_point(aes(group=id, color=factor(id)))
p <- p + theme1
p <- p + scale_x_continuous(limits=c(1,6))
# p <- p + scale_y_continuous(limits=c(30,70),
#                             breaks=seq(30,70, by=5))
# p <- p + facet_grid(.~group)
# p <- p + labs(list(
#   title="How often did you attend worship last year?",
#   x="Year of observation", y="Church attendance"))
p
source("Scripts/Graphs/graphThemes.R")
# graph
p <- ggplot2::ggplot(ds,aes(x=time,y=outcome))
p <- p + geom_line(aes(group=id, color=factor(id)))
p <- p + geom_point(aes(group=id, color=factor(id)))
# p <- p + theme1
p <- p + scale_x_continuous(limits=c(1,6))
# p <- p + scale_y_continuous(limits=c(30,70),
#                             breaks=seq(30,70, by=5))
# p <- p + facet_grid(.~group)
# p <- p + labs(list(
#   title="How often did you attend worship last year?",
#   x="Year of observation", y="Church attendance"))
p
source("Scripts/Graphs/graphThemes.R")
# graph
p <- ggplot2::ggplot(ds,aes(x=time,y=outcome))
p <- p + geom_line(aes(group=id, color=factor(id)))
p <- p + geom_point(aes(group=id, color=factor(id)))
p <- p + theme1
p <- p + scale_x_continuous(limits=c(1,6))
p <- p + scale_y_continuous(limits=c(0,12),
breaks=seq(0,12, by=1))
p <- p + labs(list(
title="Hypothetical trajectories from slide 308",
x="Occasion", y="Outcome"))
p
pathDir <- getwd()
pathDir
source(file.path(pathDir,"Scripts/Graphs/graphThemes.R"))
file.path(pathDir,"Scripts/Graphs/graphThemes.R")
rm(list=ls(all=TRUE)) # clears environment
cat("\014") # clears console
library(dplyr)
library(plyr)
library(ggplot2)
library(reshape2)
# create a vector of data called Y containing numbers 4, 6, 5, 7, 8
Y <- c(4, 6, 5, 7, 8)
# at this moment Y is of class...
class(Y)
# we can make it a matrix using matric() function
Y <- matrix(Y,5,1,byrow=TRUE) # matrix (data,#rows,#columns,...)
# create six data vectors of length 5 , one for each person (i)
i1 <- c(1, 11,  11.5, 11.8, 10.3, 9.5)
i2 <- c(2, 9,    9.8,  9.7,  9.6, 9.3)
i3 <- c(3, 9,    7.8,  8.1,  9.1, 7.8)
i4 <- c(4, 6.8,  7.9,  7,    7.8, 6.8)
i5 <- c(5, 6.4,  6.2,  6.8,  7.1, 7.2)
i6 <- c(6, 4,    5.6,  4.5,  5.2, 6.8)
# combine
data <- cbind(i1, i2, i3, i4, i5, i6)
data
class(data)
X <- matrix(data,6,6, byrow=TRUE)
X
i <- paste0("i",1:6)
vars <- c("id",paste0("t",1:5))
X
rownames(X) <- i
X
colnames(X) <- vars
X
ds <- data.frame(X)
ds
pathDir <- getwd()
source(file.path(pathDir,"Scripts/Graphs/graphThemes.R"))
p <- ggplot2::ggplot(ds,aes(x=time,y=outcome))
p <- p + geom_line(aes(group=id, color=factor(id)))
p <- p + geom_point(aes(group=id, color=factor(id)))
p <- p + theme1
p <- p + scale_x_continuous(limits=c(1,6))
p <- p + scale_y_continuous(limits=c(0,12),
breaks=seq(0,12, by=1))
p <- p + labs(list(
title="Hypothetical trajectories from slide 308",
x="Occasion", y="Outcome"))
p
rm(list=ls(all=TRUE)) # clears environment
cat("\014") # clears console
library(dplyr)
library(plyr)
library(ggplot2)
library(reshape2)
# create a vector of data called Y containing numbers 4, 6, 5, 7, 8
Y <- c(4, 6, 5, 7, 8)
# at this moment Y is of class...
class(Y)
# we can make it a matrix using matric() function
Y <- matrix(Y,5,1,byrow=TRUE) # matrix (data,#rows,#columns,...)
# create six data vectors of length 5 , one for each person (i)
i1 <- c(1, 11,  11.5, 11.8, 10.3, 9.5)
i2 <- c(2, 9,    9.8,  9.7,  9.6, 9.3)
i3 <- c(3, 9,    7.8,  8.1,  9.1, 7.8)
i4 <- c(4, 6.8,  7.9,  7,    7.8, 6.8)
i5 <- c(5, 6.4,  6.2,  6.8,  7.1, 7.2)
i6 <- c(6, 4,    5.6,  4.5,  5.2, 6.8)
# combine
data <- cbind(i1, i2, i3, i4, i5, i6)
data
class(data)
X <- matrix(data,6,6, byrow=TRUE)
X
i <- paste0("i",1:6)
vars <- c("id",paste0("t",1:5))
X
rownames(X) <- i
X
colnames(X) <- vars
X
ds <- data.frame(X)
ds
p <- ggplot(ds, aes(x=1:6))
p <- geom_line(aes(y=t1))
dsLong <- reshape2::melt(ds, id.vars="id")
dsLong <- dsLong[order(dsLong$id, dsLong$variable),]
head(dsLong,12)
dsLong$variable <- gsub(pattern="t", replacement='', x=dsLong$variable)
head(dsLong,12)
str(dsLong)
dsLong$variable <- as.integer(dsLong$variable)
str(dsLong)
dsLong <- plyr::rename(dsLong,c("variable"="time", "value"="outcome"))
ds <- dsLong
head(ds)
pathDir <- getwd()
source(file.path(pathDir,"Scripts/Graphs/graphThemes.R"))
p <- ggplot2::ggplot(ds,aes(x=time,y=outcome))
p <- p + geom_line(aes(group=id, color=factor(id)))
p <- p + geom_point(aes(group=id, color=factor(id)))
p <- p + theme1
p <- p + scale_x_continuous(limits=c(1,6))
p <- p + scale_y_continuous(limits=c(0,12),
breaks=seq(0,12, by=1))
p <- p + labs(list(
title="Hypothetical trajectories from slide 308",
x="Occasion", y="Outcome"))
p
source(file.path(pathDir,"Scripts/Graphs/graphThemes.R"))
p <- ggplot2::ggplot(ds,aes(x=time,y=outcome))
p <- p + geom_line(aes(group=id, color=factor(id)))
p <- p + geom_point(aes(group=id, color=factor(id)))
p <- p + theme1
p <- p + scale_x_continuous(limits=c(1,6))
p <- p + scale_y_continuous(limits=c(3,13),
breaks=seq(0,13, by=1))
p <- p + labs(list(
title="Hypothetical trajectories from slide 308",
x="Occasion", y="Outcome"))
p
source(file.path(pathDir,"Scripts/Graphs/graphThemes.R"))
p <- ggplot2::ggplot(ds,aes(x=time,y=outcome))
p <- p + geom_line(aes(group=id, color=factor(id)))
p <- p + geom_point(aes(group=id, color=factor(id)))
p <- p + theme1
p <- p + scale_x_continuous(limits=c(1,6), breaks=seq(4,13))
p <- p + scale_y_continuous(limits=c(3,13),
breaks=seq(0,13, by=1))
p <- p + labs(list(
title="Hypothetical trajectories from slide 308",
x="Occasion", y="Outcome"))
p
source(file.path(pathDir,"Scripts/Graphs/graphThemes.R"))
p <- ggplot2::ggplot(ds,aes(x=time,y=outcome))
p <- p + geom_line(aes(group=id, color=factor(id)))
p <- p + geom_point(aes(group=id, color=factor(id)))
p <- p + theme1
p <- p + scale_x_continuous(limits=c(1,6), breaks=seq(0,6))
p <- p + scale_y_continuous(limits=c(3,13),
breaks=seq(0,13, by=1))
p <- p + labs(list(
title="Hypothetical trajectories from slide 308",
x="Occasion", y="Outcome"))
p
source(file.path(pathDir,"Scripts/Graphs/graphThemes.R"))
p <- ggplot2::ggplot(ds,aes(x=time,y=outcome))
p <- p + geom_line(aes(group=id, color=factor(id)))
p <- p + geom_point(aes(group=id, color=factor(id)))
p <- p + theme1
p <- p + scale_x_continuous(limits=c(1,5), breaks=seq(0,6))
p <- p + scale_y_continuous(limits=c(0,12),
breaks=seq(0,13, by=2))
p <- p + labs(list(
title="Hypothetical trajectories from slide 308",
x="Occasion", y="Outcome"))
p
# remove all elements for a clean start
rm(list=ls(all=TRUE))
# Supplementary Material for Longitudinal Analysis: Modeling Within-Person Fluctuation and Change
# Chapter 2: MPLUS Syntax and Output by Model
## @knitr LoadPackages
require(sas7bdat)
library(nlme)
library(dplyr)
library(reshape2)
library(ggplot2)
## @knitr LoadData
pathDir  <- getwd()
pathChapter  <- file.path(pathDir,"Chapters/03/SAS_Chapter3a/SAS_Chapter3a.sas7bdat")
dsL3   <- read.sas7bdat(pathChapter, debug=TRUE)
ds <- data.frame(dsL3)
names(ds)
str(data.frame(ds))
# basic tables
head(ds)
summary(ds)
table(ds$group)
# stack data
dsLong <- reshape2::melt(ds,id.vars=c("PersonID","group"))
# sort for visual inspection
dsLong <- dsLong[order(dsLong$PersonID, dsLong$PersonID),]
head(dsLong,12)
# tweak the datatset
dsLong$variable <- gsub(pattern="outcome", replacement='', x=dsLong$variable)
head(dsLong,12)
dsLong <- dplyr::select(dsLong, id=PersonID, group,time=variable, outcome=value)
ds <- dsLong
ds$group <- ordered(ds$group,
levels = c(1,2),
labels = c("Control","Treatment"))
ds$time <- ordered(ds$time,
levels = c(1,2),
labels = c("Pre-Test","Post-Test"))
str(ds)
head(dsLong)
ds <- dsLong
head(ds)
# Load graph themes
source("Scripts/Graphs/graphThemes.R")
# graph
p <- ggplot2::ggplot(ds,aes(x=time,y=outcome))
p <- p + geom_line(aes(group=id, color=factor(group)), alpha=1,
position=position_jitter(w=0.0, h=0.0))
p <- p + theme1
p <- p + scale_x_discrete(limits=c(1,2), labels=c("Pre-Test","Post-Test"))
p <- p + scale_y_continuous(limits=c(30,70),
breaks=seq(30,70, by=5))
# p <- p + facet_grid(.~group)
# p <- p + labs(list(
#   title="How often did you attend worship last year?",
#   x="Year of observation", y="Church attendance"))
p
summary(ds)
library(psych)
psych::stats(ds)
psych:stats(ds)
?psych
psych:summary(ds)
psych::summary(ds)
psych:summary(ds)
m3.1 <- nlme::gls(outcome ~ 1, data=ds, method="ML")
summary(m3.1)
ds$m3.1 <- predict(m3.1)
model <- m3.1
logLik<- summary(model)$logLik
deviance<- -2*logLik
AIC<- AIC(model)
BIC<- BIC(model)
df.resid<- NA
N<- summary(model)$dims$N
p<- summary(model)$dims$p
ids<- length(unique(ds$PersonID))
df.resid<- N-p
mInfo<- data.frame("logLik" = logLik,
"deviance"= deviance,
"AIC" = AIC, "BIC" = BIC,
"df.resid" = df.resid, "N" = N,
"p" = p, "ids" = ids)
t<- t(mInfo)
rownames(t)<-colnames(mInfo)
dsmInfo<- data.frame(new=t)
colnames(dsmInfo) <- c("m3.1")
# dsmInfo$Coefficient <- rownames(dsmInfo)
mo3.1 <- dsmInfo
mo3.1$Coefficient <- rownames(mo3.1)
summary(m3.1)
print(mo3.1)
## dsFERE
# model<- modelF
FEt<- summary(model)$tTable
mFE<- (summary(model)$corBeta)
sigma<-model$sigma # std.error of scaled residuals
a<- data.frame(FEt)
a$Coefficient <- rownames(a)
b<- as.data.frame(mFE)
b$Coefficient <- rownames(b)
#TODO: finsh you rarchitect how files are created and retrieve,
#  please don't keep using this hack that adds the `timec` row to an Anova table (intentionally) missing that variable
missingTime <- !("timec" %in% a$Coefficient)
if( missingTime ) {
blankRowA <- a[1, ]
blankRowA[1, seq_len(ncol(a))] <- NA
blankRowA[1, "Coefficient"] <- "timec"
a <- plyr::rbind.fill(a, blankRowA)
rownames(a) <- a$Coefficient
blankRowB <- b[1, ]
blankRowB[1, seq_len(ncol(b))] <- NA
blankRowB[1, "Coefficient"] <- "timec"
b <- plyr::rbind.fill(b, blankRowB)
b$timec <- NA
b[b$Coefficient=="timec", "timec"] <- 1
rownames(b) <- b$Coefficient
# b <- b[, c("(Intercept)", "timec", "Coefficient")]
}
rowCountBeforeJoin <- nrow(a)
dsRE <- data.frame( row.names=rownames(b),VarRE=rep(0,nrow(b)))
dsRE$Coefficient <- rownames(dsRE)
dsRECov <- data.frame( row.names=rownames(b),intVarRE=rep(0,nrow(b)))
dsRECov$Coefficient <- rownames(dsRECov)
dsRECor <- data.frame( row.names=rownames(b),intSDRE=rep(0,nrow(b)))
dsRECor$Coefficient <- rownames(dsRECor)
dsFERE <- merge(x=a, y=b, by="Coefficient", all=TRUE)
dsFERE <- merge(x=dsFERE, y=dsRE, by="Coefficient", all=TRUE)
dsFERE <- merge(x=dsFERE, y=dsRECov, by="Coefficient", all=TRUE)
dsFERE <- merge(x=dsFERE, y=dsRECor, by="Coefficient", all=TRUE)
dsFERE$sigma<- sigma # residual SD, must be squared to get sigma squared
# dsFERE$modelName<- modelName
testit::assert("The join shouldn't add new records.",  rowCountBeforeJoin==nrow(a))
testit::assert("The join shouldn't add new records.",  nrow(dsFERE)==nrow(a))
testit::assert("The join shouldn't add new records.",  nrow(dsFERE)==nrow(b))
dsFERE<- dsFERE
head(dsFERE)
m3.1 <- nlme::gls(outcome ~ 1, data=ds, method="ML", correlation=corSymm)
m3.1 <- nlme::gls(outcome ~ 1, data=ds, method="ML", correlation=corSymm(form = ~ 1|id))
summary(m3.1)
str(summary(m3.1))
summary(ds$m3.1)
var(ds$m3.1)
sd(ds$m3.1)
ds$m3.1 <- residual(m3.1)
head(ds)
sd(ds$outcome - ds$m3.1)
var(ds$outcome - ds$m3.1)
m3.2 <- lme4::lmer(outcome ~ 1 + (1|id), data=ds, REML=FALSE)
summary(m3.2)
ds$m3.2 <- predict(m3.2)
var(ds$outcome - ds$m3.2)
m3.2 <- nlme::nlme(outcome ~ 1, data=ds, method="ML", correlation=corSymm(form = ~ 1|id))
m3.2 <- nlme::nlme(outcome ~ 1, data=ds,
fixed = 1 ~ 1, random = 1 ~ 1,
method="ML", correlation=corSymm(form = ~ 1|id))
library(swirl)
swirl()
