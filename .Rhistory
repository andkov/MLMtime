table(ds0$wave)# one-way table
## @knitr StackData
dsL <- ds0
## @knitr TweakLong
dsM <- dsL
## @knitr GraphingData0
p <- ggplot2::ggplot(dsM,aes(x=wave,y=outcome)) # map data dimension
p <- p + geom_line(aes(group=PersonID)) # draw lines and map unit of measurement
p
## @knitr LoadGraphThemes
baseSize <- 12 # set as the point of further reference
theme1 <- ggplot2::theme_bw(base_size=baseSize) +
ggplot2::theme(title=ggplot2::element_text(colour="gray20",size = baseSize+1)) +
ggplot2::theme(axis.text=ggplot2::element_text(colour="gray40", size=baseSize-2)) +
ggplot2::theme(axis.title=ggplot2::element_text(colour="gray40")) +
ggplot2::theme(panel.border = ggplot2::element_rect(colour="gray80")) +
ggplot2::theme(axis.ticks.length = grid::unit(0, "cm")) +
ggplot2::theme(text = element_text(size =baseSize+7))
## @knitr GraphingData1
p <- ggplot2::ggplot(dsM,aes(x=wave,y=outcome))
p <- p + geom_line(aes(group=PersonID)) # draw lines
p <- p + theme1
p <- p + scale_x_continuous(limits=c(1,4), breaks=c(1:4)) # X axis
p <- p + scale_y_continuous(limits=c(5,25),
breaks=seq(5,25, by=5)) # Y axis
p <- p + labs(list(
title="Does outcome change over time?", # main title
x="Wave of measurement", y="Performance on the outcome")) # axes titles
p
## @knitr GraphingData2
p <- ggplot2::ggplot(dsM,aes(x=wave,y=outcome))
p <- p + geom_line(aes(group=PersonID))
p <- p + geom_point(size=6, shape=21, fill="purple", color="black", alpha=.5)
p <- p + theme1
p <- p + scale_x_continuous(limits=c(1,4), breaks=c(1:4)) # X axis
p <- p + scale_y_continuous(limits=c(5,25),
breaks=seq(5,25, by=5)) # Y axis
p <- p + labs(list(
title="Does outcome change over time?", # main title
x="Wave of measurement", y="Performance on the outcome")) # axes titles
p
########  MODEL 5.1  ########
## @knitr RunM3_1
m3.1 <- nlme::gls(outcome ~ 1, data=dsM, method="ML") # create model object
m3.1 # print basic info
summary(m3.1) # print a bit more info
# str(summary(m3.1)) # will get you all the elements of this model object, so you can extract what you need
dsM$m3.1 <- predict(m3.1) # stores values predicted by the model
var(dsM$outcome - dsM$m3.1) # variance of the residual computed directly
sd(dsM$outcome - dsM$m3.1) # standard deviation of the residual computed directly
## @knitr StripM3_1
model  <- m3.1 # rename object for generic use
logLik <- summary(model)$logLik # extract log likelihood
deviance <- -2*logLik # extract deviance
AIC <- AIC(model) # extract Akaike information criterion
BIC <- BIC(model) # extract Bayesian information criterion
df.resid <- NA # empty slot for later use
N <- summary(model)$dims$N  # Number of distinct data points
p <- summary(model)$dims$p  # Number of estimated parameters
ids <- length(unique(dsM$PersonID)) # Number of unique units
df.resid <- N-p # residual degrees of freedom
mInfo <- data.frame("logLik" = logLik,   # collect model information indo a dataframe
"deviance"= deviance,
"AIC" = AIC, "BIC" = BIC,
"df.resid" = df.resid, "N" = N,
"p" = p, "ids" = ids)
t<- t(mInfo) # transpose
rownames(t)<-colnames(mInfo) # rename rows
mInfo<- data.frame(new=t) # save as dataframe
colnames(mInfo) <- c("m3.1") # rename columns
mo3.1 <- mInfo # save (m)odel (o)utput of model (3.1)
mo3.1$Coefficient <- rownames(mo3.1) # create a column with the name of each index
m3.1 # model results
mo3.1 # model performance
head(dsM)
## @knitr GraphM3_1
p <- ggplot2::ggplot(dsM,aes(x=wave, y=outcome))
p <- p + geom_line(aes(group=PersonID), color="firebrick", alpha=.5)  # individual trajectories
p <- p + geom_point(size=3, shape=21, fill=NA, color="black", alpha=.4) # cross-section data points
p <- p + geom_line(aes(y=m3.1, group=PersonID), color="royalblue3", size=3, alpha=.05) # modelled data
p <- p + theme1
p <- p + scale_x_continuous(limits=c(1,4), breaks=c(1:4)) # X axis
p <- p + scale_y_continuous(limits=c(5,25),
breaks=seq(5,25, by=1)) # Y axis
p <- p + labs(list(
title="Does outcome change over time?", # main title
x="Wave of measurement", y="Performance on the outcome")) # axes titles
p
########  MODEL 5.1  ########
## @knitr RunM5_1
m5.1 <- lme4::lmer(outcome ~ 1 + (1 | PersonID), data=dsM)# create model object
m5.1 # print basic info
summary(m5.1) # print a bit more info
dsM$m5.1 <- predict(m5.1) # stores values predicted by the model
var(dsM$outcome - dsM$m5.1) # variance of the residual computed directly
sd(dsM$outcome - dsM$m5.1) # standard deviation of the residual computed directly
## @knitr StripM5_1
model <- m5.1
mInfo<-summary(model)$AICtab
mInfo["N"]<- model@devcomp$dims["N"] # number of datapoints, verify
mInfo["p"]<- model@devcomp$dims["p"] # number of estimated parameters, verify
mInfo["ids"]<- (summary(model))$ngrps # number of units on level-2, here: individuals
# mInfo<- c(mInfo, "modelName"=modelName)
mInfo<-data.frame(mInfo)
mInfo<- plyr::rename(mInfo,replace= c("mInfo"="m5.1"))
mInfo$Coefficient <- rownames(mInfo)
mp5.1 <- mInfo# model information
m5.1# model results
mp5.1 # model performance
## @knitr CheckM5_1
head(dsM)
display(m5.1) # print a bit more info
source("./Scripts/Utility/InstallPackages.R")
model <- m5.1
mInfo<-summary(model)$AICtab
mInfo["N"]<- model@devcomp$dims["N"] # number of datapoints, verify
mInfo["p"]<- model@devcomp$dims["p"] # number of estimated parameters, verify
mInfo["ids"]<- (summary(model))$ngrps # number of units on level-2, here: individuals
# mInfo<- c(mInfo, "modelName"=modelName)
mInfo<-data.frame(mInfo) # turn into a dataframe
mInfo<- plyr::rename(mInfo,replace= c("mInfo"="m5.1")) # rename variables
mInfo$Coefficient <- rownames(mInfo) # save index names as a column
mi5.1 <- mInfo # create model information  object
m5.1# model results
mi5.1 # model information
m5.1 <- lme4::lmer(outcome ~ 1 + (1 | PersonID), data=dsM)# create model object
m5.1 # print basic info
display(m5.1) # print a bit more info
dsM$m5.1 <- predict(m5.1) # stores values predicted by the model
var(dsM$outcome - dsM$m5.1) # variance of the residual computed directly
sd(dsM$outcome - dsM$m5.1) # standard deviation of the residual computed directly
## @knitr InspectM5_1
model <- m5.1
mInfo<-summary(model)$AICtab
mInfo["N"]<- model@devcomp$dims["N"] # number of datapoints, verify
mInfo["p"]<- model@devcomp$dims["p"] # number of estimated parameters, verify
mInfo["ids"]<- (summary(model))$ngrps # number of units on level-2, here: individuals
# mInfo<- c(mInfo, "modelName"=modelName)
mInfo<-data.frame(mInfo) # turn into a dataframe
mInfo<- plyr::rename(mInfo,replace= c("mInfo"="m5.1")) # rename variables
mInfo$Coefficient <- rownames(mInfo) # save index names as a column
mi5.1 <- mInfo # create model information  object
m5.1# model results
mi5.1 # model information
#This code checks the user's installed packages against a list of packages (that we've manually compiled)
#   necessary for the graphs to be rendered. Missing packages are installed, while existing packages are not.
#   If anyone sees a package that should be on there, please tell me.
rm(list=ls(all=TRUE)) #Clear the memory for any variables set from any previous runs.
packagesToInstall <- c(
"arm" # for working with model objects, by Gelman & Hill
, "colorspace" #Explicit control over the HCL color scheme
, "devtools" #package development
, "dplyr" # for general data manipulation
, "ggplot2" #Graphing
, "ggthemes" #Extra themes, scales and geoms for ggplot
, "ggmap" #Maps & graphics, based on ggplot
, "googleVis" #JavaScript-based visualizations, like scrollable tables
, "grid" #The underlying framework for the graphics
, "gridExtra" #for table FERE graphs
, "gridBase" #Additional grid functions
, "knitr" #For creating dynamic reports
, "lme4" # used for Random Coefficient Modeling
, "lubridate" #Consistent/convienent function signatures for manipulating dates
, "minqa"
, "nlme" # used for Fixed Effect modeling
, "plyr" #Important for most of our data manipulation
, "psych" # data summary + other useful function
, "RColorBrewer" #Explicit control over the Color Brewer colors.  See http://colorbrewer2.org/
, "reshape2" #Data manipulation not covered in plyr,  wide <-> long
, "RJSONIO" # for processing jason files
, "roxygen2" #Creates documentation Rd file from (well-formed) comments
, "RODBC"
, "sas7bdat" # Imports SAS formatted data files
, "stringr"
, "testit" #has the useful `assert()` function
, "testthat" #Heavier testing framework that's good for package development
, "yaml" #for gh-pages production
)
for( packageName in packagesToInstall ) {
available <- require(packageName, character.only=TRUE) #Loads the packages, and indicates if it's available
if( !available ) {
install.packages(packageName, dependencies=TRUE)
require( packageName, character.only=TRUE)
}
}
update.packages(ask="graphics", checkBuilt=TRUE)
#There will be a warning message for every  package that's called but not installed.  It will look like:
#    Warning message:
#        In library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE,  :
#        there is no package called 'bootstrap'
#If you see the message (either in here or in another piece of the project's code),
#   then run this again to make sure everything is installed.  You shouldn't get a warning again.
# remove all elements for a clean start
rm(list=ls(all=TRUE))
# Supplementary Material for Longitudinal Analysis: Modeling Within-Person Fluctuation and Change
# Chapter 2: MPLUS Syntax and Output by Model
## @knitr InstallPackage
# source("./Scripts/Utility/InstallPackages.R")
## @knitr LoadPackages
require(sas7bdat) # for inputting data
library(dplyr) # for general data manipulation
library(reshape2) # for data : wide <-> long
library(psych) # data summary + etc
library(ggplot2) # graphing
library(nlme) # estimate mixed models | esp. gls()
library(lme4) # estimate mixed models | esp. lmer()
library(arm)  # process model objects
## @knitr LoadData
pathDir  <- getwd() # get working directory, e.i. residence of .Rproj file
pathFile  <- file.path(pathDir,"Chapters/05/SAS_Chapter5/SAS_Chapter5.sas7bdat") # location of the file
ds0   <- read.sas7bdat(pathFile, debug=TRUE) # import file
ds0 <- data.frame(ds0) # save as a data frame
## @knitr BasicDescriptive
class(ds0) # what class?
dim(ds0)  # what dimensions?
names(ds0) # what are column names?
str(ds0) # what its structure?
head(ds0) # what do first few lines look like?
summary(ds0) # basic summary
psych::describe(ds0) # summary by psych package
table(ds0$wave)# one-way table
## @knitr StackData
dsL <- ds0
## @knitr TweakLong
dsM <- dsL
## @knitr GraphingData0
p <- ggplot2::ggplot(dsM,aes(x=wave,y=outcome)) # map data dimension
p <- p + geom_line(aes(group=PersonID)) # draw lines and map unit of measurement
p
## @knitr LoadGraphThemes
baseSize <- 12 # set as the point of further reference
theme1 <- ggplot2::theme_bw(base_size=baseSize) +
ggplot2::theme(title=ggplot2::element_text(colour="gray20",size = baseSize+1)) +
ggplot2::theme(axis.text=ggplot2::element_text(colour="gray40", size=baseSize-2)) +
ggplot2::theme(axis.title=ggplot2::element_text(colour="gray40")) +
ggplot2::theme(panel.border = ggplot2::element_rect(colour="gray80")) +
ggplot2::theme(axis.ticks.length = grid::unit(0, "cm")) +
ggplot2::theme(text = element_text(size =baseSize+7))
## @knitr GraphingData1
p <- ggplot2::ggplot(dsM,aes(x=wave,y=outcome))
p <- p + geom_line(aes(group=PersonID)) # draw lines
p <- p + theme1
p <- p + scale_x_continuous(limits=c(1,4), breaks=c(1:4)) # X axis
p <- p + scale_y_continuous(limits=c(5,25),
breaks=seq(5,25, by=5)) # Y axis
p <- p + labs(list(
title="Does outcome change over time?", # main title
x="Wave of measurement", y="Performance on the outcome")) # axes titles
p
## @knitr GraphingData2
p <- ggplot2::ggplot(dsM,aes(x=wave,y=outcome))
p <- p + geom_line(aes(group=PersonID))
p <- p + geom_point(size=6, shape=21, fill="purple", color="black", alpha=.5)
p <- p + theme1
p <- p + scale_x_continuous(limits=c(1,4), breaks=c(1:4)) # X axis
p <- p + scale_y_continuous(limits=c(5,25),
breaks=seq(5,25, by=5)) # Y axis
p <- p + labs(list(
title="Does outcome change over time?", # main title
x="Wave of measurement", y="Performance on the outcome")) # axes titles
p
########  MODEL 5.1  ########
## @knitr RunM3_1
m3.1 <- nlme::gls(outcome ~ 1, data=dsM, method="ML") # create model object
m3.1 # print basic info
summary(m3.1) # print a bit more info
# str(summary(m3.1)) # will get you all the elements of this model object, so you can extract what you need
dsM$m3.1 <- predict(m3.1) # stores values predicted by the model
var(dsM$outcome - dsM$m3.1) # variance of the residual computed directly
sd(dsM$outcome - dsM$m3.1) # standard deviation of the residual computed directly
## @knitr InspectM3_1
model  <- m3.1 # rename object for generic use
logLik <- summary(model)$logLik # extract log likelihood
deviance <- -2*logLik # extract deviance
AIC <- AIC(model) # extract Akaike information criterion
BIC <- BIC(model) # extract Bayesian information criterion
df.resid <- NA # empty slot for later use
N <- summary(model)$dims$N  # Number of distinct data points
p <- summary(model)$dims$p  # Number of estimated parameters
ids <- length(unique(dsM$PersonID)) # Number of unique units
df.resid <- N-p # residual degrees of freedom
mInfo <- data.frame("logLik" = logLik,   # collect model information indo a dataframe
"deviance"= deviance,
"AIC" = AIC, "BIC" = BIC,
"df.resid" = df.resid, "N" = N,
"p" = p, "ids" = ids)
t<- t(mInfo) # transpose
rownames(t)<-colnames(mInfo) # rename rows
mInfo<- data.frame(new=t) # turn into a dataframe
colnames(mInfo) <- c("m3.1") # rename columns
mi3.1 <- mInfo # save (m)odel (o)utput of model (3.1)
mi3.1$Coefficient <- rownames(mi3.1) # create a column with the name of each index
m3.1 # model results
mi3.1 # model information
head(dsM)
## @knitr GraphM3_1
p <- ggplot2::ggplot(dsM,aes(x=wave, y=outcome))
p <- p + geom_line(aes(group=PersonID), color="firebrick", alpha=.5)  # individual trajectories
p <- p + geom_point(size=3, shape=21, fill=NA, color="black", alpha=.4) # cross-section data points
p <- p + geom_line(aes(y=m3.1, group=PersonID), color="royalblue3", size=3, alpha=.05) # modelled data
p <- p + theme1
p <- p + scale_x_continuous(limits=c(1,4), breaks=c(1:4)) # X axis
p <- p + scale_y_continuous(limits=c(5,25),
breaks=seq(5,25, by=1)) # Y axis
p <- p + labs(list(
title="Does outcome change over time?", # main title
x="Wave of measurement", y="Performance on the outcome")) # axes titles
p
########  MODEL 5.1  ########
## @knitr RunM5_1
m5.1 <- lme4::lmer(outcome ~ 1 + (1 | PersonID), data=dsM)# create model object
m5.1 # print basic info
display(m5.1) # print a bit more info
dsM$m5.1 <- predict(m5.1) # stores values predicted by the model
var(dsM$outcome - dsM$m5.1) # variance of the residual computed directly
sd(dsM$outcome - dsM$m5.1) # standard deviation of the residual computed directly
## @knitr InspectM5_1
model <- m5.1
mInfo<-summary(model)$AICtab
mInfo["N"]<- model@devcomp$dims["N"] # number of datapoints, verify
mInfo["p"]<- model@devcomp$dims["p"] # number of estimated parameters, verify
mInfo["ids"]<- (summary(model))$ngrps # number of units on level-2, here: individuals
# mInfo<- c(mInfo, "modelName"=modelName)
mInfo<-data.frame(mInfo) # turn into a dataframe
mInfo<- plyr::rename(mInfo,replace= c("mInfo"="m5.1")) # rename variables
mInfo$Coefficient <- rownames(mInfo) # save index names as a column
mi5.1 <- mInfo # create model information  object
m5.1# model results
mi5.1 # model information
## @knitr CheckM5_1
head(dsM)
## @knitr GraphM5_1
p <- ggplot2::ggplot(dsM,aes(x=wave, y=outcome))
p <- p + geom_line(aes(group=PersonID), color="firebrick", alpha=.5)  # individual trajectories
p <- p + geom_point(size=3, shape=21, fill=NA, color="black", alpha=.4) # cross-section data points
p <- p + geom_line(aes(y=m5.1, group=PersonID), color="royalblue3", size=1, alpha=.5) # modelled data
p <- p + theme1
p <- p + scale_x_continuous(limits=c(1,4), breaks=c(1:4)) # X axis
p <- p + scale_y_continuous(limits=c(5,25),
breaks=seq(5,25, by=1)) # Y axis
p <- p + labs(list(
title="Does outcome change over time?", # main title
x="Wave of measurement", y="Performance on the outcome")) # axes titles
p
# remove all elements for a clean start
rm(list=ls(all=TRUE))
# Supplementary Material for Longitudinal Analysis: Modeling Within-Person Fluctuation and Change
# Chapter 2: MPLUS Syntax and Output by Model
## @knitr InstallPackage
# source("./Scripts/Utility/InstallPackages.R")
## @knitr LoadPackages
require(sas7bdat) # for inputting data
library(dplyr) # for general data manipulation
library(reshape2) # for data : wide <-> long
library(psych) # data summary + etc
library(ggplot2) # graphing
library(nlme) # estimate mixed models | esp. gls()
library(lme4) # estimate mixed models | esp. lmer()
library(arm)  # process model objects
## @knitr LoadData
pathDir  <- getwd() # get working directory, e.i. residence of .Rproj file
pathFile  <- file.path(pathDir,"Chapters/05/SAS_Chapter5/SAS_Chapter5.sas7bdat") # location of the file
ds0   <- read.sas7bdat(pathFile, debug=TRUE) # import file
ds0 <- data.frame(ds0) # save as a data frame
## @knitr BasicDescriptive
class(ds0) # what class?
dim(ds0)  # what dimensions?
names(ds0) # what are column names?
str(ds0) # what its structure?
head(ds0) # what do first few lines look like?
summary(ds0) # basic summary
psych::describe(ds0) # summary by psych package
table(ds0$wave)# one-way table
## @knitr StackData
dsL <- ds0
## @knitr TweakLong
dsM <- dsL
## @knitr GraphingData0
p <- ggplot2::ggplot(dsM,aes(x=wave,y=outcome)) # map data dimension
p <- p + geom_line(aes(group=PersonID)) # draw lines and map unit of measurement
p
## @knitr LoadGraphThemes
baseSize <- 12 # set as the point of further reference
theme1 <- ggplot2::theme_bw(base_size=baseSize) +
ggplot2::theme(title=ggplot2::element_text(colour="gray20",size = baseSize+1)) +
ggplot2::theme(axis.text=ggplot2::element_text(colour="gray40", size=baseSize-2)) +
ggplot2::theme(axis.title=ggplot2::element_text(colour="gray40")) +
ggplot2::theme(panel.border = ggplot2::element_rect(colour="gray80")) +
ggplot2::theme(axis.ticks.length = grid::unit(0, "cm")) +
ggplot2::theme(text = element_text(size =baseSize+7))
## @knitr GraphingData1
p <- ggplot2::ggplot(dsM,aes(x=wave,y=outcome))
p <- p + geom_line(aes(group=PersonID)) # draw lines
p <- p + theme1
p <- p + scale_x_continuous(limits=c(1,4), breaks=c(1:4)) # X axis
p <- p + scale_y_continuous(limits=c(5,25),
breaks=seq(5,25, by=5)) # Y axis
p <- p + labs(list(
title="Does outcome change over time?", # main title
x="Wave of measurement", y="Performance on the outcome")) # axes titles
p
## @knitr GraphingData2
p <- ggplot2::ggplot(dsM,aes(x=wave,y=outcome))
p <- p + geom_line(aes(group=PersonID))
p <- p + geom_point(size=6, shape=21, fill="purple", color="black", alpha=.5)
p <- p + theme1
p <- p + scale_x_continuous(limits=c(1,4), breaks=c(1:4)) # X axis
p <- p + scale_y_continuous(limits=c(5,25),
breaks=seq(5,25, by=5)) # Y axis
p <- p + labs(list(
title="Does outcome change over time?", # main title
x="Wave of measurement", y="Performance on the outcome")) # axes titles
p
########  MODEL 5.1  ########
## @knitr RunM3_1
m3.1 <- nlme::gls(outcome ~ 1, data=dsM, method="ML") # create model object
m3.1 # print basic info
summary(m3.1) # print a bit more info
# str(summary(m3.1)) # will get you all the elements of this model object, so you can extract what you need
dsM$m3.1 <- predict(m3.1) # stores values predicted by the model
var(dsM$outcome - dsM$m3.1) # variance of the residual computed directly
sd(dsM$outcome - dsM$m3.1) # standard deviation of the residual computed directly
## @knitr InspectM3_1
model  <- m3.1 # rename object for generic use
logLik <- summary(model)$logLik # extract log likelihood
deviance <- -2*logLik # extract deviance
AIC <- AIC(model) # extract Akaike information criterion
BIC <- BIC(model) # extract Bayesian information criterion
df.resid <- NA # empty slot for later use
N <- summary(model)$dims$N  # Number of distinct data points
p <- summary(model)$dims$p  # Number of estimated parameters
ids <- length(unique(dsM$PersonID)) # Number of unique units
df.resid <- N-p # residual degrees of freedom
mInfo <- data.frame("logLik" = logLik,   # collect model information indo a dataframe
"deviance"= deviance,
"AIC" = AIC, "BIC" = BIC,
"df.resid" = df.resid, "N" = N,
"p" = p, "ids" = ids)
t<- t(mInfo) # transpose
rownames(t)<-colnames(mInfo) # rename rows
mInfo<- data.frame(new=t) # turn into a dataframe
colnames(mInfo) <- c("m3.1") # rename columns
mi3.1 <- mInfo # save (m)odel (o)utput of model (3.1)
mi3.1$Coefficient <- rownames(mi3.1) # create a column with the name of each index
m3.1 # model results
mi3.1 # model information
head(dsM)
## @knitr GraphM3_1
p <- ggplot2::ggplot(dsM,aes(x=wave, y=outcome))
p <- p + geom_line(aes(group=PersonID), color="firebrick", alpha=.5)  # individual trajectories
p <- p + geom_point(size=3, shape=21, fill=NA, color="black", alpha=.4) # cross-section data points
p <- p + geom_line(aes(y=m3.1, group=PersonID), color="royalblue3", size=3, alpha=.05) # modelled data
p <- p + theme1
p <- p + scale_x_continuous(limits=c(1,4), breaks=c(1:4)) # X axis
p <- p + scale_y_continuous(limits=c(5,25),
breaks=seq(5,25, by=1)) # Y axis
p <- p + labs(list(
title="Does outcome change over time?", # main title
x="Wave of measurement", y="Performance on the outcome")) # axes titles
p
########  MODEL 5.1  ########
## @knitr RunM5_1
m5.1 <- lme4::lmer(outcome ~ 1 + (1 | PersonID), data=dsM)# create model object
m5.1 # print basic info
display(m5.1) # print a bit more info
dsM$m5.1 <- predict(m5.1) # stores values predicted by the model
var(dsM$outcome - dsM$m5.1) # variance of the residual computed directly
sd(dsM$outcome - dsM$m5.1) # standard deviation of the residual computed directly
## @knitr InspectM5_1
model <- m5.1
mInfo<-summary(model)$AICtab
mInfo["N"]<- model@devcomp$dims["N"] # number of datapoints, verify
mInfo["p"]<- model@devcomp$dims["p"] # number of estimated parameters, verify
mInfo["ids"]<- (summary(model))$ngrps # number of units on level-2, here: individuals
# mInfo<- c(mInfo, "modelName"=modelName)
mInfo<-data.frame(mInfo) # turn into a dataframe
mInfo<- plyr::rename(mInfo,replace= c("mInfo"="m5.1")) # rename variables
mInfo$Coefficient <- rownames(mInfo) # save index names as a column
mi5.1 <- mInfo # create model information  object
m5.1# model results
mi5.1 # model information
## @knitr CheckM5_1
head(dsM)
## @knitr GraphM5_1
p <- ggplot2::ggplot(dsM,aes(x=wave, y=outcome))
p <- p + geom_line(aes(group=PersonID), color="firebrick", alpha=.5)  # individual trajectories
p <- p + geom_point(size=3, shape=21, fill=NA, color="black", alpha=.4) # cross-section data points
p <- p + geom_line(aes(y=m5.1, group=PersonID), color="royalblue3", alpha=.7) # modelled data
p <- p + theme1
p <- p + scale_x_continuous(limits=c(1,4), breaks=c(1:4)) # X axis
p <- p + scale_y_continuous(limits=c(5,25),
breaks=seq(5,25, by=1)) # Y axis
p <- p + labs(list(
title="Does outcome change over time?", # main title
x="Wave of measurement", y="Performance on the outcome")) # axes titles
p
head(dsM)
head(dsM,20)
p <- ggplot2::ggplot(dsM,aes(x=wave, y=outcome))
p <- p + geom_line(aes(group=PersonID), color="firebrick", alpha=.2)  # individual trajectories
p <- p + geom_point(size=3, shape=21, fill=NA, color="black", alpha=.6) # cross-section data points
p <- p + geom_line(aes(y=m5.1, group=PersonID), color="royalblue3", alpha=.7) # modelled data
p <- p + theme1
p <- p + scale_x_continuous(limits=c(1,4), breaks=c(1:4)) # X axis
p <- p + scale_y_continuous(limits=c(5,25),
breaks=seq(5,25, by=1)) # Y axis
p <- p + labs(list(
title="Does outcome change over time?", # main title
x="Wave of measurement", y="Performance on the outcome")) # axes titles
p
install.packages("digest")
install.packages("digest")
