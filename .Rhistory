N <- summary(model)$dims$N  # Number of distinct data points
p <- summary(model)$dims$p  # Number of estimated parameters
ids <- length(unique(dsM$PersonID)) # Number of unique units
df.resid <- N-p # residual degrees of freedom
mInfo <- data.frame("logLik" = logLik,   # collect model information indo a dataframe
"deviance"= deviance,
"AIC" = AIC, "BIC" = BIC,
"df.resid" = df.resid, "N" = N,
"p" = p, "ids" = ids)
t<- t(mInfo) # transpose
rownames(t)<-colnames(mInfo) # rename rows
mInfo<- data.frame(new=t) # turn into a dataframe
colnames(mInfo) <- c("m3.1") # rename columns
mi3.1 <- mInfo # save (m)odel (o)utput of model (3.1)
mi3.1$Coefficient <- rownames(mi3.1) # create a column with the name of each index
m3.1 #  model results
mi3.1 #  model information
head(dsM) # visual check
## @knitr GraphM3_1
p <- ggplot2::ggplot(dsM,aes(x=wave, y=outcome))
p <- p + geom_line(aes(group=PersonID), color="firebrick", alpha=.5)  # individual trajectories
p <- p + geom_point(size=3, shape=21, fill=NA, color="black", alpha=.4) # cross-section data points
p <- p + geom_line(aes(y=m3.1, group=PersonID), color="royalblue3", size=3, alpha=.05) # modelled data
p <- p + theme1
p <- p + scale_x_continuous(limits=c(1,4), breaks=c(1:4)) # X axis
p <- p + scale_y_continuous(limits=c(5,25),
breaks=seq(5,25, by=1)) # Y axis
p <- p + labs(list(
title="Does outcome change over time?", # main title
x="Wave of measurement", y="Performance on the outcome")) # axes titles
p
# remove all elements for a clean start
rm(list=ls(all=TRUE))
# Supplementary Material for Longitudinal Analysis: Modeling Within-Person Fluctuation and Change
# Chapter 2: MPLUS Syntax and Output by Model
## @knitr InstallPackage
# source("./Scripts/Utility/InstallPackages.R")
## @knitr LoadPackages
require(sas7bdat) # for inputting data
library(dplyr) # for general data manipulation
library(reshape2) # for data : wide <-> long
library(psych) # data summary + etc
library(ggplot2) # graphing
library(nlme) # estimate mixed models | esp. gls()
library(lme4) # estimate mixed models | esp. lmer()
library(arm)  # process model objects
## @knitr LoadData
pathDir  <- getwd() # get working directory, e.i. residence of .Rproj file
pathFile  <- file.path(pathDir,"Chapters/05/SAS_Chapter5/SAS_Chapter5.sas7bdat") # location of the file
ds0   <- read.sas7bdat(pathFile, debug=TRUE) # import file
ds0 <- data.frame(ds0) # save as a data frame
## @knitr BasicDescriptive
class(ds0) # what class?
dim(ds0)  # what dimensions?
names(ds0) # what are column names?
str(ds0) # what its structure?
head(ds0) # what do first few lines look like?
base::summary(ds0) # basic summary
psych::describe(ds0) # summary by psych package
table(ds0$wave)# one-way table
## @knitr StackData
dsL <- ds0
## @knitr TweakLong
dsM <- dsL
#### Basic Graphs  ####
## @knitr GraphingData0
p <- ggplot2::ggplot(dsM,aes(x=wave,y=outcome)) # map data dimension
p <- p + geom_line(aes(group=PersonID)) # draw lines and map unit of measurement
p
## @knitr LoadGraphThemes
baseSize <- 12 # set as the point of further reference
theme1 <- ggplot2::theme_bw(base_size=baseSize) +
ggplot2::theme(title=ggplot2::element_text(colour="gray20",size = baseSize+1)) +
ggplot2::theme(axis.text=ggplot2::element_text(colour="gray40", size=baseSize-2)) +
ggplot2::theme(axis.title=ggplot2::element_text(colour="gray40")) +
ggplot2::theme(panel.border = ggplot2::element_rect(colour="gray80")) +
ggplot2::theme(axis.ticks.length = grid::unit(0, "cm")) +
ggplot2::theme(text = element_text(size =baseSize+7))
## @knitr GraphingData1
p <- ggplot2::ggplot(dsM,aes(x=wave,y=outcome))
p <- p + geom_line(aes(group=PersonID)) # draw lines
p <- p + theme1
p <- p + scale_x_continuous(limits=c(1,4), breaks=c(1:4)) # X axis
p <- p + scale_y_continuous(limits=c(5,25),
breaks=seq(5,25, by=5)) # Y axis
p <- p + labs(list(
title="Does outcome change over time?", # main title
x="Wave of measurement", y="Performance on the outcome")) # axes titles
p
## @knitr GraphingData2
p <- ggplot2::ggplot(dsM,aes(x=wave,y=outcome))
p <- p + geom_line(aes(group=PersonID))
p <- p + geom_point(size=6, shape=21, fill="purple", color="black", alpha=.5)
p <- p + theme1
p <- p + scale_x_continuous(limits=c(1,4), breaks=c(1:4)) # X axis
p <- p + scale_y_continuous(limits=c(5,25),
breaks=seq(5,25, by=5)) # Y axis
p <- p + labs(list(
title="Does outcome change over time?", # main title
x="Wave of measurement", y="Performance on the outcome")) # axes titles
p
####  MODEL 3.1  ####
## @knitr RunM3_1
m3.1 <- nlme::gls(outcome ~ 1, data=dsM, method="ML") # create model object
dsM$m3.1 <- predict(m3.1) # stores values predicted by the model
summary(m3.1) # print a bit more info
# str(summary(m3.1)) # to inspect object directly
## @knitr InspectM3_1
model  <- m3.1 # rename object for generic use
logLik <- summary(model)$logLik # extract log likelihood
deviance <- -2*logLik # extract deviance
AIC <- AIC(model) # extract Akaike information criterion
BIC <- BIC(model) # extract Bayesian information criterion
df.resid <- NA # empty slot for later use
N <- summary(model)$dims$N  # Number of distinct data points
p <- summary(model)$dims$p  # Number of estimated parameters
ids <- length(unique(dsM$PersonID)) # Number of unique units
df.resid <- N-p # residual degrees of freedom
mInfo <- data.frame("logLik" = logLik,   # collect model information indo a dataframe
"deviance"= deviance,
"AIC" = AIC, "BIC" = BIC,
"df.resid" = df.resid, "N" = N,
"p" = p, "ids" = ids)
t<- t(mInfo) # transpose
rownames(t)<-colnames(mInfo) # rename rows
mInfo<- data.frame(new=t) # turn into a dataframe
colnames(mInfo) <- c("m3.1") # rename columns
mi3.1 <- mInfo # save (m)odel (o)utput of model (3.1)
mi3.1$Coefficient <- rownames(mi3.1) # create a column with the name of each index
m3.1 #  model results
mi3.1 #  model information
head(dsM) # visual check
## @knitr GraphM3_1
p <- ggplot2::ggplot(dsM,aes(x=wave, y=outcome))
p <- p + geom_line(aes(group=PersonID), color="firebrick", alpha=.5)  # individual trajectories
p <- p + geom_point(size=3, shape=21, fill=NA, color="black", alpha=.4) # cross-section data points
p <- p + geom_line(aes(y=m3.1, group=PersonID), color="royalblue3", size=3, alpha=.05) # modelled data
p <- p + theme1
p <- p + scale_x_continuous(limits=c(1,4), breaks=c(1:4)) # X axis
p <- p + scale_y_continuous(limits=c(5,25),
breaks=seq(5,25, by=1)) # Y axis
p <- p + labs(list(
title="Does outcome change over time?", # main title
x="Wave of measurement", y="Performance on the outcome")) # axes titles
p
####  MODEL 5.1  ####
## @knitr RunM5_1
m5.1 <- lme4::lmer(outcome ~ 1 + (1 | PersonID), data=dsM, REML=FALSE)# create model object
dsM$m5.1 <- predict(m5.1) # stores values predicted by the model
display(m5.1) # tidy results
## @knitr InspectM5_1
model <- m5.1
mInfo<-summary(model)$AICtab
mInfo["N"]<- model@devcomp$dims["N"] # number of datapoints, verify
mInfo["p"]<- model@devcomp$dims["p"] # number of estimated parameters, verify
mInfo["ids"]<- (summary(model))$ngrps # number of units on level-2, here: individuals
# mInfo<- c(mInfo, "modelName"=modelName)
mInfo<-data.frame(mInfo) # turn into a dataframe
mInfo<- plyr::rename(mInfo,replace= c("mInfo"="m5.1")) # rename variables
mInfo$Coefficient <- rownames(mInfo) # save index names as a column
mi5.1 <- mInfo # create model information  object
display(m5.1)
mi5.1 #  model information
head(dsM) # visual check
## @knitr GraphM5_1
p <- ggplot2::ggplot(dsM,aes(x=wave, y=outcome))
p <- p + geom_line(aes(group=PersonID), color="firebrick", alpha=.2)  # individual trajectories
p <- p + geom_point(size=3, shape=21, fill=NA, color="black", alpha=.6) # cross-section data points
p <- p + geom_line(aes(y=m5.1, group=PersonID), color="royalblue3", alpha=.7) # modelled data
p <- p + theme1
p <- p + scale_x_continuous(limits=c(1,4), breaks=c(1:4)) # X axis
p <- p + scale_y_continuous(limits=c(5,25),
breaks=seq(5,25, by=1)) # Y axis
p <- p + labs(list(
title="Does outcome change over time?", # main title
x="Wave of measurement", y="Performance on the outcome")) # axes titles
p
####  MODEL 5.3  ####
## @knitr RunM5_3
m5.3 <- lme4::lmer(outcome ~ 1 + wave + (1 | PersonID), data=dsM, REML=FALSE)# create model object
dsM$m5.3 <- predict(m5.3) # stores values predicted by the model
display(m5.3) # tidy results
## @knitr InspectM5_3
model <- m5.3
mInfo<-summary(model)$AICtab
mInfo["N"]<- model@devcomp$dims["N"] # number of datapoints, verify
mInfo["p"]<- model@devcomp$dims["p"] # number of estimated parameters, verify
mInfo["ids"]<- (summary(model))$ngrps # number of units on level-2, here: individuals
# mInfo<- c(mInfo, "modelName"=modelName)
mInfo<-data.frame(mInfo) # turn into a dataframe
mInfo<- plyr::rename(mInfo,replace= c("mInfo"="m5.3")) # rename variables
mInfo$Coefficient <- rownames(mInfo) # save index names as a column
mi5.3 <- mInfo # create model information  object
display(m5.3)
mi5.3 #  model information
head(dsM) # visual check
## @knitr GraphM5_3
p <- ggplot2::ggplot(dsM,aes(x=wave, y=outcome))
p <- p + geom_line(aes(group=PersonID), color="firebrick", alpha=.2)  # individual trajectories
p <- p + geom_point(size=3, shape=21, fill=NA, color="black", alpha=.6) # cross-section data points
p <- p + geom_line(aes(y=m5.3, group=PersonID), color="royalblue3", alpha=.7) # modelled data
p <- p + theme1
p <- p + scale_x_continuous(limits=c(1,4), breaks=c(1:4)) # X axis
p <- p + scale_y_continuous(limits=c(5,25),
breaks=seq(5,25, by=1)) # Y axis
p <- p + labs(list(
title="Does outcome change over time?", # main title
x="Wave of measurement", y="Performance on the outcome")) # axes titles
p
####  MODEL 5.5  ####
## @knitr RunM5_5
m5.5 <- lme4::lmer(outcome ~ 1 + wave + (1 + wave | PersonID), data=dsM, REML=FALSE)# create model object
dsM$m5.5 <- predict(m5.5) # stores values predicted by the model
display(m5.5) # tidy results
## @knitr InspectM5_5
model <- m5.5
mInfo<-summary(model)$AICtab
mInfo["N"]<- model@devcomp$dims["N"] # number of datapoints, verify
mInfo["p"]<- model@devcomp$dims["p"] # number of estimated parameters, verify
mInfo["ids"]<- (summary(model))$ngrps # number of units on level-2, here: individuals
# mInfo<- c(mInfo, "modelName"=modelName)
mInfo<-data.frame(mInfo) # turn into a dataframe
mInfo<- plyr::rename(mInfo,replace= c("mInfo"="m5.5")) # rename variables
mInfo$Coefficient <- rownames(mInfo) # save index names as a column
mi5.5 <- mInfo # create model information  object
display(m5.5)
mi5.5 #  model information
head(dsM) # visual check
## @knitr GraphM5_5
p <- ggplot2::ggplot(dsM,aes(x=wave, y=outcome))
p <- p + geom_line(aes(group=PersonID), color="firebrick", alpha=.2)  # individual trajectories
p <- p + geom_point(size=3, shape=21, fill=NA, color="black", alpha=.6) # cross-section data points
p <- p + geom_line(aes(y=m5.5, group=PersonID), color="royalblue3", alpha=.7) # modelled data
p <- p + theme1
p <- p + scale_x_continuous(limits=c(1,4), breaks=c(1:4)) # X axis
p <- p + scale_y_continuous(limits=c(5,25),
breaks=seq(5,25, by=1)) # Y axis
p <- p + labs(list(
title="Does outcome change over time?", # main title
x="Wave of measurement", y="Performance on the outcome")) # axes titles
p
fixef(m5.5)
a <- fixef(m5.5)
a
str(a)
ranef(m5.5)
cor(ranef(m5.5))
corr(ranef(m5.5))
sd(ranef(m5.5))
sd(as.matrix(ranef(m5.5)))
head(ranef(m5.5))
display(m5.5)
class(a)
var(a[,"(Intercept)"], a[,"wave"])
a[,"(Intercept)"]
a[2,"(Intercept)"]
a[2,"(Intercept)"]
head(a)
RE <- ranef(m5.5)
var(RE)
class(RE)
a <- as.data.frame(RE)
REint <- ranef(m5.5)$(Intercept)
RE
RE$wave
RE[,"wave"]
se.fixef(5.5)["wave"]
se.fixef(m5.5)["wave"]
c(-2,2)
c(-2,2)*se.fixef(m5.5)["wave"]
fixef(m5.5)["wave"] + c(-2,2)*se.fixef(m5.5)["wave"]
## Project title: 3d plot for MBR cover
##    Created at:
##        Author: Philippe Rast <prast@uvic.ca>
##          Data: CAttellPoem
##       Summary:
##
## ---------------------------------------------------------------------- ##
## Wild Oceans bride, in gorgeous hues engowned,
## Alembicked of the spume! Her children’s toys
## Are emerald coombes, lone golden coves, a mound
## Of amethystine moor. The vaulting hills their joys,
## And last the bosom of the warm red earth.
## She calls their manhood with their far-off gleams
## On granite tors, and brings strange pride to birth,
## ‘Neath misty, silver rain,her cloak of dreams.
## They keep the faith, whether they humbly mould
## Quiet ploughmen’s cots, white seabirds in the vale;
## Or beauty-maddened scorning Time and Death,
## Burn ‘cross the earth her name in valour’s gold.
## Fare forth to found new worlds with questing sail;
## Or sing immortal truths with mortal breath.
## encoded with http://rumkin.com/tools/cipher/numbers.php
cattell <- read.csv('Catell2.dat', header=FALSE)
cattell
library(lattice)
data <- as.matrix(cattell)
wireframe(data)
cloud(data, type=c('p'))
levelplot(data)
contourplot(data)
png('PoemV1.png', bg='transparent')
cloud(data, type=c('l'), groups=row, screen = list(z = -70, x = -60, y = 10),
aspect=0.9, par.box=list(lty='23') ,zlim=c(-10,30))
dev.off()
png('PoemV1a.png', bg='transparent')
cloud(data, type=c('h','p'), groups=row, screen = list(z = -70, x = -60, y = 10),
aspect=0.9, par.box=list(lty='23') ,zlim=c(0,30))
dev.off()
,
par.settings = list(box.3d = list(lwd=c(1,1,1,1,
1,1,1,1,1))))
## make long
library(multilevel)
cattell$row <- 1:14
cattell.y <- make.univ(cattell, cattell[,c(1:49)], 'position', 'po_em')
cattell.y
wireframe(cattell.y$po_em~cattell.y$position*cattell.y$row, groups=cattell.y$row,
screen = list(z = -120, x = -60, y = 3),
aspect=1,zlim=c(-20,40), panel.aspect=1, draped=T)
cloud(cattell.y$po_em~cattell.y$position*cattell.y$row, groups=cattell.y$row,
screen = list(z = -120, x = -60, y = 3),type='l',
aspect=1,zlim=c(-20,40), panel.aspect=1, draped=T)
#install.packages('scatterplot3d') # cf. http://blog.revolutionanalytics.com/2014/02/3d-plots-in-r.html
library(scatterplot3d)
example(scatterplot3d)
scatterplot3d(cattell.y$po_em~cattell.y$position*cattell.y$row, highlight.3d=TRUE,
type="h", main="3D Scatterplot")
#install.packages('plot3D')
library(plot3D)
png('PoemV2.png', bg='transparent')
scatter3D(x=cattell.y$row, y=cattell.y$position, z=cattell.y$po_em, type='h',
expand=0.6,theta=310,phi=35)
dev.off()
cattell.y
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
# patternToBuild <- "(?<!README)\\.Rmd$" #Gets all 'Rmd' , that aren't named `README`.
patternToBuild <- "(?<!README)\\.(R){0,1}md$" #Gets all 'Rmd' and 'md' files, that aren't named `README`.
pathFilesToBuild <- list.files(full.names=TRUE, recursive=TRUE)
pathFilesToBuild <- grep(patternToBuild, pathFilesToBuild, perl=TRUE, value=TRUE)
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
"html_document"
),
clean=TRUE)
}
base::system("bundle exec jekyll build")
# remove all elements for a clean start
rm(list=ls(all=TRUE))
cat("\014")
## @knitr InstallPackage
# source("./Scripts/Utility/InstallPackages.R")
## @knitr LoadPackages
require(sas7bdat) # for inputting data
library(dplyr) # for general data manipulation
library(reshape2) # for data : wide <-> long
library(psych) # data summary + etc
library(ggplot2) # graphing
library(nlme) # estimate fixed models | esp. gls()
library(lme4) # estimate mixed models | esp. lmer()
library(arm)  # process model objects
## @knitr LoadData
ds0 <- readRDS("~/GitHub/psy564/Data/Raw/ELSA/ds0_ELSA.rds")
dim(ds0)
length(unique(ds0$PID))
head(ds0)
# remove all elements for a clean start
rm(list=ls(all=TRUE))
cat("\014")
## @knitr InstallPackage
# source("./Scripts/Utility/InstallPackages.R")
## @knitr LoadPackages
require(sas7bdat) # for inputting data
library(dplyr) # for general data manipulation
library(reshape2) # for data : wide <-> long
library(psych) # data summary + etc
library(ggplot2) # graphing
library(nlme) # estimate fixed models | esp. gls()
library(lme4) # estimate mixed models | esp. lmer()
library(arm)  # process model objects
## @knitr LoadData
ds0 <- readRDS("~/GitHub/psy564/Data/Raw/ELSA/ds0_ELSA.rds")
dim(ds0)
length(unique(ds0$PID))
head(ds0)
dsL <- ds0
## @knitr DataFilter
dsM <- dsL
table(dsM$irecall,dsM$wave, useNA="ifany")
# There are no valid respondes to the focal outcome, so we remove wave 5
# Wave 0 doesn't not contain observations of interest, so remove wave 0
dsM <- dplyr::filter(dsM, wave %in% c(1:4))
table(dsM$irecall,dsM$wave, useNA="ifany")
# The missing values will complecate some of the modeling so remove for now
## @knitr DataFilter2
# Selecting individuals into the working dataset
length(unique(dsM$id))
table(dsM$wave)
dsM <- dplyr::filter(dsM, (ave(!is.na(irecall), id, FUN = all))) # only complete trajectoies
length(unique(dsM$id))
table(dsM$wave)
dsM <- dsM[dsM$id %in% unique((dsM[dsM$wave==4,c("id","wave")])$id ),] # only who reached 4th wave
length(unique(dsM$id))
table(dsM$wave)
baseSize <- 12 # set as the point of further reference
theme1 <- ggplot2::theme_bw(base_size=baseSize) +
ggplot2::theme(title=ggplot2::element_text(colour="gray20",size = baseSize+1)) +
ggplot2::theme(axis.text=ggplot2::element_text(colour="gray40", size=baseSize-2)) +
ggplot2::theme(axis.title=ggplot2::element_text(colour="gray40")) +
ggplot2::theme(panel.border = ggplot2::element_rect(colour="gray80")) +
ggplot2::theme(axis.ticks.length = grid::unit(0, "cm")) +
ggplot2::theme(text = element_text(size =baseSize+7))
p <- ggplot2::ggplot(dsM, aes(y=irecall,x=factor(year), fill=condition))
p <- p + geom_violin( adjust=1, alpha=.4 )
p <- p + scale_y_continuous(limits=c(0,10), breaks=seq(0,10,by=1))
p <- p + scale_fill_manual(values=paletteColor4conditions)
p <- p + geom_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
p <- p + stat_summary(fun.y=mean, geom="point", fill="white", shape=21, size=4)
p <- p + facet_grid(dbts ~ hptn)
p <- p + theme1
p
## @knitr LoadGraphThemes
paletteColor4conditions <- c("Hypertension"="red",
"Diabetes"="blue",
"Both"="purple",
"None"="grey10")
baseSize <- 12 # set as the point of further reference
theme1 <- ggplot2::theme_bw(base_size=baseSize) +
ggplot2::theme(title=ggplot2::element_text(colour="gray20",size = baseSize+1)) +
ggplot2::theme(axis.text=ggplot2::element_text(colour="gray40", size=baseSize-2)) +
ggplot2::theme(axis.title=ggplot2::element_text(colour="gray40")) +
ggplot2::theme(panel.border = ggplot2::element_rect(colour="gray80")) +
ggplot2::theme(axis.ticks.length = grid::unit(0, "cm")) +
ggplot2::theme(text = element_text(size =baseSize+7))
## @knitr CrossSectionDist
# Cross-sectional view: irecall
p <- ggplot2::ggplot(dsM, aes(y=irecall,x=factor(year), fill=condition))
p <- p + geom_violin( adjust=1, alpha=.4 )
p <- p + scale_y_continuous(limits=c(0,10), breaks=seq(0,10,by=1))
p <- p + scale_fill_manual(values=paletteColor4conditions)
p <- p + geom_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
p <- p + stat_summary(fun.y=mean, geom="point", fill="white", shape=21, size=4)
p <- p + facet_grid(dbts ~ hptn)
p <- p + theme1
p
## @knitr CrossSectionCount
# Cross-sectional view: frequence of irecall
p <- ggplot2::ggplot(dsM, aes(x=factor(year)))
p <- p + scale_y_continuous(breaks=seq(0,6000,by=1000))
p <- p + geom_bar(aes(fill=condition), alpha=.4)
p <- p + facet_grid(dbts ~ hptn)
p <- p + scale_fill_manual(values=paletteColor4conditions)
p <- p + guides(fill = guide_legend(reverse=F, title="Diagnosis at A"))
p <- p + theme1
p
## @knitr EasyData
ds <- dplyr::filter(dsM, id %in% sample(unique(id),100)) %>% # select only N ids
dplyr::select(id, dob, female, hptn, dbts, condition, year, time, Age, irecall,animal,prospect, drecall)
head(ds)
str(ds)
# remove all elements for a clean start
rm(list=ls(all=TRUE))
cat("\014")
## @knitr InstallPackage
# source("./Scripts/Utility/InstallPackages.R")
## @knitr LoadPackages
require(sas7bdat) # for inputting data
library(dplyr) # for general data manipulation
library(reshape2) # for data : wide <-> long
library(psych) # data summary + etc
library(ggplot2) # graphing
library(nlme) # estimate fixed models | esp. gls()
library(lme4) # estimate mixed models | esp. lmer()
library(arm)  # process model objects
## @knitr LoadData
ds0 <- readRDS("~/GitHub/psy564/Data/Raw/ELSA/ds0_ELSA.rds")
dim(ds0)
length(unique(ds0$PID))
head(ds0)
table(dsM$irecall,dsM$wave, useNA="ifany")
table(dsM$irecall,dsM$wave, useNA="ifany")
# remove all elements for a clean start
rm(list=ls(all=TRUE))
cat("\014")
## @knitr InstallPackage
# source("./Scripts/Utility/InstallPackages.R")
## @knitr LoadPackages
require(sas7bdat) # for inputting data
library(dplyr) # for general data manipulation
library(reshape2) # for data : wide <-> long
library(psych) # data summary + etc
library(ggplot2) # graphing
library(nlme) # estimate fixed models | esp. gls()
library(lme4) # estimate mixed models | esp. lmer()
library(arm)  # process model objects
## @knitr LoadData
ds0 <- readRDS("~/GitHub/psy564/Data/Raw/ELSA/ds0_ELSA.rds")
dim(ds0)
length(unique(ds0$PID))
head(ds0)
dsL <- ds0
## @knitr DataFilter
dsM <- dsL
table(dsM$irecall,dsM$wave, useNA="ifany")
dsM <- dplyr::filter(dsM, wave %in% c(1:4))
table(dsM$irecall,dsM$wave, useNA="ifany")
