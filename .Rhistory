## @knitr dummyChunk
####  MODEL 5.5  ####
## @knitr RunM5_5
m5.5 <- lme4::lmer(irecall ~ 1 + wave + (1 + wave | id), data=dsM, REML=FALSE)# create model object
dsM$m5.5 <- predict(m5.5) # stores values predicted by the model
display(m5.5) # tidy results
## @knitr InspectM5_5
model <- m5.5
mInfo<-summary(model)$AICtab
mInfo["N"]<- model@devcomp$dims["N"] # number of datapoints, verify
mInfo["p"]<- model@devcomp$dims["p"] # number of estimated parameters, verify
mInfo["ids"]<- (summary(model))$ngrps # number of units on level-2, here: individuals
# mInfo<- c(mInfo, "modelName"=modelName)
mInfo<-data.frame(mInfo) # turn into a dataframe
mInfo<- plyr::rename(mInfo,replace= c("mInfo"="m5.5")) # rename variables
mInfo$Coefficient <- rownames(mInfo) # save index names as a column
mi5.5 <- mInfo # create model information  object
display(m5.5)
mi5.5 #  model information
head(dsM) # visual check
## @knitr GraphM5_5
p <- ggplot2::ggplot(dsM,aes(x=wave, y=irecall))
p <- p + geom_line(aes(group=id), color="firebrick", alpha=.2)  # individual trajectories
p <- p + geom_point(size=3, shape=21, fill=NA, color="black", alpha=.6) # cross-section data points
p <- p + geom_line(aes(y=m5.5, group=id), color="royalblue3", alpha=.7) # modelled data
p <- p + theme1
p <- p + scale_x_continuous(limits=c(1,4), breaks=c(1:4)) # X axis
p <- p + scale_y_continuous(limits=c(0,10),
breaks=seq(0,10, by=1)) # Y axis
p <- p + labs(list(
title="Does outcome change over time?", # main title
x="Wave of measurement", y="Performance on the outcome")) # axes titles
p
p <- ggplot2::ggplot(dsM,aes(x=wave, y=irecall))
p <- p + geom_line(aes(group=id), color="firebrick", alpha=.2)  # individual trajectories
p <- p + geom_point(size=3, shape=21, fill=NA, color="black", alpha=.6,
position=position_jitter(h=1,w=2)) # cross-section data points
p <- p + geom_line(aes(y=m5.5, group=id), color="royalblue3", alpha=.7) # modelled data
p <- p + theme1
p <- p + scale_x_continuous(limits=c(1,4), breaks=c(1:4)) # X axis
p <- p + scale_y_continuous(limits=c(0,10),
breaks=seq(0,10, by=1)) # Y axis
p <- p + labs(list(
title="Does outcome change over time?", # main title
x="Wave of measurement", y="Performance on the outcome")) # axes titles
p
p <- ggplot2::ggplot(dsM,aes(x=wave, y=irecall))
p <- p + geom_line(aes(group=id), color="firebrick", alpha=.2)  # individual trajectories
p <- p + geom_point(size=3, shape=21, fill=NA, color="black", alpha=.6,
position=position_jitter(h=1,w=0)) # cross-section data points
p <- p + geom_line(aes(y=m5.5, group=id), color="royalblue3", alpha=.7) # modelled data
p <- p + theme1
p <- p + scale_x_continuous(limits=c(1,4), breaks=c(1:4)) # X axis
p <- p + scale_y_continuous(limits=c(0,10),
breaks=seq(0,10, by=1)) # Y axis
p <- p + labs(list(
title="Does outcome change over time?", # main title
x="Wave of measurement", y="Performance on the outcome")) # axes titles
p
p <- ggplot2::ggplot(dsM,aes(x=wave, y=irecall))
p <- p + geom_line(aes(group=id), color="firebrick", alpha=.2)  # individual trajectories
p <- p + geom_point(size=3, shape=21, fill=NA, color="black", alpha=.6,
position=position_jitter(h=.5,w=0)) # cross-section data points
p <- p + geom_line(aes(y=m5.5, group=id), color="royalblue3", alpha=.7) # modelled data
p <- p + theme1
p <- p + scale_x_continuous(limits=c(1,4), breaks=c(1:4)) # X axis
p <- p + scale_y_continuous(limits=c(0,10),
breaks=seq(0,10, by=1)) # Y axis
p <- p + labs(list(
title="Does outcome change over time?", # main title
x="Wave of measurement", y="Performance on the outcome")) # axes titles
p
p <- ggplot2::ggplot(dsM,aes(x=wave, y=irecall))
p <- p + geom_line(aes(group=id), color="firebrick", alpha=.2)  # individual trajectories
p <- p + geom_point(size=3, shape=21, fill=NA, color="black", alpha=.6,
position=position_jitter(h=.3,w=0)) # cross-section data points
p <- p + geom_line(aes(y=m5.5, group=id), color="royalblue3", alpha=.7) # modelled data
p <- p + theme1
p <- p + scale_x_continuous(limits=c(1,4), breaks=c(1:4)) # X axis
p <- p + scale_y_continuous(limits=c(0,10),
breaks=seq(0,10, by=1)) # Y axis
p <- p + labs(list(
title="Does outcome change over time?", # main title
x="Wave of measurement", y="Performance on the outcome")) # axes titles
p
# remove all elements for a clean start
rm(list=ls(all=TRUE))
cat("\014")
## @knitr InstallPackage
# source("./Scripts/Utility/InstallPackages.R")
## @knitr LoadPackages
require(sas7bdat) # for inputting data
library(dplyr) # for general data manipulation
library(reshape2) # for data : wide <-> long
library(psych) # data summary + etc
library(ggplot2) # graphing
library(nlme) # estimate fixed models | esp. gls()
library(lme4) # estimate mixed models | esp. lmer()
library(arm)  # process model objects
## @knitr LoadData
ds0 <- readRDS("~/GitHub/psy564/Data/Raw/ELSA/ds0_ELSA.rds")
dim(ds0)
length(unique(ds0$PID))
head(ds0)
View(ds0)
outwidthChunks <- "130%"
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
pathFilesToBuild <- base::file.path("./4.Rmd")
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
# Build the report
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
"html_document"
#                       "ioslides_presentation"
),
clean=TRUE)
}
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
pathFilesToBuild <- base::file.path("./4.Rmd")
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
# Build the report
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
"html_document"
#                       "ioslides_presentation"
),
clean=TRUE)
}
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
pathFilesToBuild <- base::file.path("./4.Rmd")
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
# Build the report
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
"html_document"
#                       "ioslides_presentation"
),
clean=TRUE)
}
base::system("bundle exec jekyll build")
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
pathFilesToBuild <- base::file.path("./7.Rmd")
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
# Build the report
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
"html_document"
#                       "ioslides_presentation"
),
clean=TRUE)
}
base::system("bundle exec jekyll build")
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
pathFilesToBuild <- base::file.path("./7.Rmd")
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
# Build the report
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
"html_document"
#                       "ioslides_presentation"
),
clean=TRUE)
}
base::system("bundle exec jekyll build")
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
pathFilesToBuild <- base::file.path("./7.Rmd")
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
# Build the report
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
"html_document"
#                       "ioslides_presentation"
),
clean=TRUE)
}
base::system("bundle exec jekyll build")
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
# patternToBuild <- "(?<!README)\\.Rmd$" #Gets all 'Rmd' , that aren't named `README`.
patternToBuild <- "(?<!README)\\.(R){0,1}md$" #Gets all 'Rmd' and 'md' files, that aren't named `README`.
pathFilesToBuild <- list.files(full.names=TRUE, recursive=TRUE)
pathFilesToBuild <- grep(patternToBuild, pathFilesToBuild, perl=TRUE, value=TRUE)
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
"html_document"
),
clean=TRUE)
}
base::system("bundle exec jekyll build")
<<<<<<< HEAD
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
pathFilesToBuild <- base::file.path("./7.Rmd")
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
# Build the report
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
"html_document"
#                       "ioslides_presentation"
),
clean=TRUE)
}
base::system("bundle exec jekyll build")
=======
# remove all elements for a clean start
rm(list=ls(all=TRUE))
cat("\014")
## @knitr InstallPackage
# source("./Scripts/Utility/InstallPackages.R")
## @knitr LoadPackages
require(sas7bdat) # for inputting data
library(dplyr) # for general data manipulation
library(reshape2) # for data : wide <-> long
library(psych) # data summary + etc
library(ggplot2) # graphing
library(nlme) # estimate fixed models | esp. gls()
library(lme4) # estimate mixed models | esp. lmer()
library(arm)  # process model objects
## @knitr LoadData
ds0 <- readRDS("~/GitHub/psy564/Data/Raw/ELSA/ds0_ELSA.rds")
dim(ds0)
length(unique(ds0$PID))
head(ds0)
# remove all elements for a clean start
rm(list=ls(all=TRUE))
cat("\014")
## @knitr InstallPackage
# source("./Scripts/Utility/InstallPackages.R")
## @knitr LoadPackages
require(sas7bdat) # for inputting data
library(dplyr) # for general data manipulation
library(reshape2) # for data : wide <-> long
library(psych) # data summary + etc
library(ggplot2) # graphing
library(nlme) # estimate fixed models | esp. gls()
library(lme4) # estimate mixed models | esp. lmer()
library(arm)  # process model objects
## @knitr LoadData
ds0 <- readRDS("~/GitHub/psy564/Data/Raw/ELSA/ds0_ELSA.rds")
dim(ds0)
length(unique(ds0$PID))
head(ds0)
dsL <- ds0
## @knitr DataFilter
dsM <- dsL
table(dsM$irecall,dsM$wave, useNA="ifany")
# There are no valid respondes to the focal outcome, so we remove wave 5
# Wave 0 doesn't not contain observations of interest, so remove wave 0
dsM <- dplyr::filter(dsM, wave %in% c(1:4))
table(dsM$irecall,dsM$wave, useNA="ifany")
# The missing values will complecate some of the modeling so remove for now
## @knitr DataFilter2
# Selecting individuals into the working dataset
length(unique(dsM$id))
table(dsM$wave)
dsM <- dplyr::filter(dsM, (ave(!is.na(irecall), id, FUN = all))) # only complete trajectoies
length(unique(dsM$id))
table(dsM$wave)
dsM <- dsM[dsM$id %in% unique((dsM[dsM$wave==4,c("id","wave")])$id ),] # only who reached 4th wave
length(unique(dsM$id))
table(dsM$wave)
baseSize <- 12 # set as the point of further reference
theme1 <- ggplot2::theme_bw(base_size=baseSize) +
ggplot2::theme(title=ggplot2::element_text(colour="gray20",size = baseSize+1)) +
ggplot2::theme(axis.text=ggplot2::element_text(colour="gray40", size=baseSize-2)) +
ggplot2::theme(axis.title=ggplot2::element_text(colour="gray40")) +
ggplot2::theme(panel.border = ggplot2::element_rect(colour="gray80")) +
ggplot2::theme(axis.ticks.length = grid::unit(0, "cm")) +
ggplot2::theme(text = element_text(size =baseSize+7))
p <- ggplot2::ggplot(dsM, aes(y=irecall,x=factor(year), fill=condition))
p <- p + geom_violin( adjust=1, alpha=.4 )
p <- p + scale_y_continuous(limits=c(0,10), breaks=seq(0,10,by=1))
p <- p + scale_fill_manual(values=paletteColor4conditions)
p <- p + geom_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
p <- p + stat_summary(fun.y=mean, geom="point", fill="white", shape=21, size=4)
p <- p + facet_grid(dbts ~ hptn)
p <- p + theme1
p
## @knitr LoadGraphThemes
paletteColor4conditions <- c("Hypertension"="red",
"Diabetes"="blue",
"Both"="purple",
"None"="grey10")
baseSize <- 12 # set as the point of further reference
theme1 <- ggplot2::theme_bw(base_size=baseSize) +
ggplot2::theme(title=ggplot2::element_text(colour="gray20",size = baseSize+1)) +
ggplot2::theme(axis.text=ggplot2::element_text(colour="gray40", size=baseSize-2)) +
ggplot2::theme(axis.title=ggplot2::element_text(colour="gray40")) +
ggplot2::theme(panel.border = ggplot2::element_rect(colour="gray80")) +
ggplot2::theme(axis.ticks.length = grid::unit(0, "cm")) +
ggplot2::theme(text = element_text(size =baseSize+7))
## @knitr CrossSectionDist
# Cross-sectional view: irecall
p <- ggplot2::ggplot(dsM, aes(y=irecall,x=factor(year), fill=condition))
p <- p + geom_violin( adjust=1, alpha=.4 )
p <- p + scale_y_continuous(limits=c(0,10), breaks=seq(0,10,by=1))
p <- p + scale_fill_manual(values=paletteColor4conditions)
p <- p + geom_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
p <- p + stat_summary(fun.y=mean, geom="point", fill="white", shape=21, size=4)
p <- p + facet_grid(dbts ~ hptn)
p <- p + theme1
p
## @knitr CrossSectionCount
# Cross-sectional view: frequence of irecall
p <- ggplot2::ggplot(dsM, aes(x=factor(year)))
p <- p + scale_y_continuous(breaks=seq(0,6000,by=1000))
p <- p + geom_bar(aes(fill=condition), alpha=.4)
p <- p + facet_grid(dbts ~ hptn)
p <- p + scale_fill_manual(values=paletteColor4conditions)
p <- p + guides(fill = guide_legend(reverse=F, title="Diagnosis at A"))
p <- p + theme1
p
## @knitr EasyData
ds <- dplyr::filter(dsM, id %in% sample(unique(id),100)) %>% # select only N ids
dplyr::select(id, dob, female, hptn, dbts, condition, year, time, Age, irecall,animal,prospect, drecall)
head(ds)
str(ds)
# remove all elements for a clean start
rm(list=ls(all=TRUE))
cat("\014")
## @knitr InstallPackage
# source("./Scripts/Utility/InstallPackages.R")
## @knitr LoadPackages
require(sas7bdat) # for inputting data
library(dplyr) # for general data manipulation
library(reshape2) # for data : wide <-> long
library(psych) # data summary + etc
library(ggplot2) # graphing
library(nlme) # estimate fixed models | esp. gls()
library(lme4) # estimate mixed models | esp. lmer()
library(arm)  # process model objects
## @knitr LoadData
ds0 <- readRDS("~/GitHub/psy564/Data/Raw/ELSA/ds0_ELSA.rds")
dim(ds0)
length(unique(ds0$PID))
head(ds0)
table(dsM$irecall,dsM$wave, useNA="ifany")
table(dsM$irecall,dsM$wave, useNA="ifany")
# remove all elements for a clean start
rm(list=ls(all=TRUE))
cat("\014")
## @knitr InstallPackage
# source("./Scripts/Utility/InstallPackages.R")
## @knitr LoadPackages
require(sas7bdat) # for inputting data
library(dplyr) # for general data manipulation
library(reshape2) # for data : wide <-> long
library(psych) # data summary + etc
library(ggplot2) # graphing
library(nlme) # estimate fixed models | esp. gls()
library(lme4) # estimate mixed models | esp. lmer()
library(arm)  # process model objects
## @knitr LoadData
ds0 <- readRDS("~/GitHub/psy564/Data/Raw/ELSA/ds0_ELSA.rds")
dim(ds0)
length(unique(ds0$PID))
head(ds0)
dsL <- ds0
## @knitr DataFilter
dsM <- dsL
table(dsM$irecall,dsM$wave, useNA="ifany")
dsM <- dplyr::filter(dsM, wave %in% c(1:4))
table(dsM$irecall,dsM$wave, useNA="ifany")
>>>>>>> origin/master
ds0 <- readRDS("~/GitHub/psy564/Data/Raw/ELSA/ds0_ELSA.rds")
dsELSA <- readRDS("~/GitHub/psy564/Data/Raw/ELSA/dsELSA.rds")
View(ds0)
View(ds0)
View(ds0)
View(dsELSA)
names(ds0)
ht, db, htdb, none, angina=ang1A, stroke=stk1A, smoked=evrsmk1A,
ds <- dplyr::select(ds0, id, dob, age, sex,
ht, db, htdb, none, angina=ang1A, stroke=stk1A, smoked=evrsmk1A,
time, wave, year, Age,
irecall, drecall, animal, prospect)
ht, db, htdb, nocase, angina=ang1A, stroke=stk1A, smoked=evrsmk1A,
time, wave, year, Age,
ds <- dplyr::select(ds0, id, dob, age, sex,
ht, db, htdb, nocase, angina=ang1A, stroke=stk1A, smoked=evrsmk1A,
time, wave, year, Age,
irecall, drecall, animal, prospect)
View(ds)
baseSize <- 12 # set as the point of further reference
theme1 <- ggplot2::theme_bw(base_size=baseSize) +
ggplot2::theme(title=ggplot2::element_text(colour="gray20",size = baseSize+1)) +
ggplot2::theme(axis.text=ggplot2::element_text(colour="gray40", size=baseSize-2)) +
ggplot2::theme(axis.title=ggplot2::element_text(colour="gray40")) +
ggplot2::theme(panel.border = ggplot2::element_rect(colour="gray80")) +
ggplot2::theme(axis.ticks.length = grid::unit(0, "cm")) +
ggplot2::theme(text = element_text(size =baseSize+7))
# remove all elements for a clean start
rm(list=ls(all=TRUE))
cat("\014")
## @knitr InstallPackage
# source("./Scripts/Utility/InstallPackages.R")
## @knitr LoadPackages
require(sas7bdat) # for inputting data
library(dplyr) # for general data manipulation
library(reshape2) # for data : wide <-> long
library(psych) # data summary + etc
library(ggplot2) # graphing
library(nlme) # estimate fixed models | esp. gls()
library(lme4) # estimate mixed models | esp. lmer()
library(arm)  # process model objects
## @knitr LoadData
ds0 <- readRDS("~/GitHub/psy564/Data/Raw/ELSA/ds0_ELSA.rds")
dim(ds0)
length(unique(ds0$PID))
head(ds0)
dsL <- ds0
## @knitr DataFilter
dsM <- dsL
table(dsM$irecall,dsM$wave, useNA="ifany")
# There are no valid respondes to the focal outcome, so we remove wave 5
# Wave 0 doesn't not contain observations of interest, so remove wave 0
dsM <- dplyr::filter(dsM, wave %in% c(1:4))
table(dsM$irecall,dsM$wave, useNA="ifany")
# The missing values will complecate some of the modeling so remove for now
## @knitr DataFilter2
# Selecting individuals into the working dataset
length(unique(dsM$id))
table(dsM$wave)
dsM <- dplyr::filter(dsM, (ave(!is.na(irecall), id, FUN = all))) # only complete trajectoies
length(unique(dsM$id))
table(dsM$wave)
dsM <- dsM[dsM$id %in% unique((dsM[dsM$wave==4,c("id","wave")])$id ),] # only who reached 4th wave
length(unique(dsM$id))
table(dsM$wave)
saveRDS(object=dsM, file="~/GitHub/psy564/Data/Derived/ELSA/dsM_ELSA.rds", compress="xz")
## @knitr LoadGraphThemes
paletteColor4conditions <- c("Hypertension"="red",
"Diabetes"="blue",
"Both"="purple",
"None"="grey10")
baseSize <- 12 # set as the point of further reference
theme1 <- ggplot2::theme_bw(base_size=baseSize) +
ggplot2::theme(title=ggplot2::element_text(colour="gray20",size = baseSize+1)) +
ggplot2::theme(axis.text=ggplot2::element_text(colour="gray40", size=baseSize-2)) +
ggplot2::theme(axis.title=ggplot2::element_text(colour="gray40")) +
ggplot2::theme(panel.border = ggplot2::element_rect(colour="gray80")) +
ggplot2::theme(axis.ticks.length = grid::unit(0, "cm")) +
ggplot2::theme(text = element_text(size =baseSize+7))
## @knitr CrossSectionDist
# Cross-sectional view: irecall
p <- ggplot2::ggplot(dsM, aes(y=irecall,x=factor(year), fill=condition))
p <- p + geom_violin( adjust=1, alpha=.4 )
p <- p + scale_y_continuous(limits=c(0,10), breaks=seq(0,10,by=1))
p <- p + scale_fill_manual(values=paletteColor4conditions)
p <- p + geom_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
p <- p + stat_summary(fun.y=mean, geom="point", fill="white", shape=21, size=4)
p <- p + facet_grid(dbts ~ hptn)
p <- p + theme1
p
## @knitr CrossSectionCount
# Cross-sectional view: frequence of irecall
p <- ggplot2::ggplot(dsM, aes(x=factor(year)))
p <- p + scale_y_continuous(breaks=seq(0,6000,by=1000))
p <- p + geom_bar(aes(fill=condition), alpha=.4)
p <- p + facet_grid(dbts ~ hptn)
p <- p + scale_fill_manual(values=paletteColor4conditions)
p <- p + guides(fill = guide_legend(reverse=F, title="Diagnosis at A"))
p <- p + theme1
p
ds <- dplyr::filter(dsL, id %in% sample(unique(id),100)) %>% # select only N ids
dplyr::select(id, dob, female, hptn, dbts, condition, year, time, Age, irecall,animal,prospect, drecall)
head(ds)
ds <- dplyr::filter(dsL, id %in% sample(unique(id),100)) %>% # select only N ids
dplyr::select(id, dob, female, wave, year, time, Age, irecall,animal,prospect, drecall)
head(ds)
ds <- dplyr::filter(dsL, id %in% sample(unique(id),100)) %>% # select only N ids
dplyr::select(id, dob, female, age80, edu11,wave, year, time, Age, irecall,animal,prospect, drecall)
head(ds)
