head(ch3a) # what do first few lines look like?
summary(ch3a) # basic summary
psych::describe(ch3a) # summary by psych package
table(ch3a$group)# one-way table
## @knitr StackData
# stack data into a new dataset
dsLong <- reshape2::melt(ch3a,id.vars=c("PersonID","group")) # id.vars are those NOT STACKED
head(dsLong) # inspect
dsLong <- dsLong[order(dsLong$PersonID, dsLong$variable),] # sort for visual inspection
head(dsLong) # inspect
## @knitr TweakLong1
# substitute the repeating string in column "variable" by nothing
dsLong$variable <- gsub(pattern="outcome", replacement='', x=dsLong$variable)
head(dsLong)
dsLong <- plyr::rename(dsLong, c("variable"="time", "value"="outcome")) # rename with plyr package
# Alternatively: rename and order variables with dplyr package
# dsLong <- dplyr::select(dsLong, id=PersonID, group,time=variable, outcome=value)
head(dsLong)
ds <- dsLong # save with a more convenient name
## @knitr TweakLong2
ds$group <- ordered(ds$group, levels = c(1,2),
labels = c("Control","Treatment"))
ds$time <- ordered(ds$time, levels = c(1,2),
labels = c("Pre-Test","Post-Test"))
str(ds)
p <- ggplot2::ggplot(dsLong,aes(x=time,y=outcome))
p <- p + geom_line(aes(group=PersonID, color=group)) # map color
p <- p + scale_x_discrete(labels=c("Pre-Test","Post-Test")) # X axis
p <- p + scale_y_continuous(limits=c(30,70),
breaks=seq(30,70, by=5)) # Y axis
p <- p + labs(list(
title="Does treatment affect test performance?", # main title
x="Times of observation", y="Test score")) # axes titles
p
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
pathFilesToBuild <- base::file.path("./Chapters/03/R_Chapter3/hoffman-ch3.Rmd")
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
# Build the report
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
"html_document"
#                       "ioslides_presentation"
),
clean=TRUE)
}
# To generate the static website from the htmls that have been printed in the code above
# 1) Select the "gh-pages" branch of your project's repository in GitHub client
# 2) Open command line terminal and change directory to the root folder of your repository that you've cloned onto your hard drive using GitHub client (type "cmd" in the address line of the File Explorer opened on root folder of your repository's clone)
# 3) type "bundle install" to install Bundler if you're creating the website for the first time
# 4) type "bundle exec jekyll serve" to build site and serve to localhost:4000
m3.1 <- nlme::gls(outcome ~ 1, data=ds, method="ML", correlation=corSymm(form = ~ 1|id))
m3.1 <- nlme::gls(outcome ~ 1, data=ds, method="ML")
summary(m3.1)
display(m3.1)
summary(m3.1)
str(summary(m3.1))
p <- summary(model)$dims$p  #
model  <- m3.1 # rename object for generic use
p <- summary(model)$dims$p  #
p
N <- summary(model)$dims$N  # Number of units
N
m3.1 <- nlme::gls(outcome ~ 1, data=ds, method="ML") # create model object
summary(m3.1)
# str(summary(m3.1)) # will get you all the elements of this model object
ds$m3.1 <- predict(m3.1) # stores values predicted by the model
var(ds$outcome - ds$m3.1) # variance of the residual computed directly
model  <- m3.1 # rename object for generic use
logLik <- summary(model)$logLik # extract log likelihood
deviance <- -2*logLik # extract deviance
AIC <- AIC(model) # extract Akaike information criterion
BIC <- BIC(model) # extract Bayesian information criterion
df.resid <- NA # empty slot for later use
N <- summary(model)$dims$N  # Number of distinct data points
p <- summary(model)$dims$p  # Number of estimated parameters
ids <- length(unique(ds$PersonID)) # Number of unique units
df.resid <- N-p # residual degrees of freedom
mInfo <- data.frame("logLik" = logLik,   # collect model information indo a dataframe
"deviance"= deviance,
"AIC" = AIC, "BIC" = BIC,
"df.resid" = df.resid, "N" = N,
"p" = p, "ids" = ids)
t<- t(mInfo) # transpose
rownames(t)<-colnames(mInfo) # rename rows
dsmInfo<- data.frame(new=t) # save as dataframe
colnames(dsmInfo) <- c("m3.1") # rename columns
dsmInfo
mo3.1 <- dsmInfo
mo3.1
mo3.1$Coefficient <- rownames(mo3.1)
summary(m3.1)
print(mo3.1)
m3.1
sd(ds$outcome - ds$m3.1)
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
pathFilesToBuild <- base::file.path("./Chapters/03/R_Chapter3/hoffman-ch3.Rmd")
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
# Build the report
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
"html_document"
#                       "ioslides_presentation"
),
clean=TRUE)
}
# To generate the static website from the htmls that have been printed in the code above
# 1) Select the "gh-pages" branch of your project's repository in GitHub client
# 2) Open command line terminal and change directory to the root folder of your repository that you've cloned onto your hard drive using GitHub client (type "cmd" in the address line of the File Explorer opened on root folder of your repository's clone)
# 3) type "bundle install" to install Bundler if you're creating the website for the first time
# 4) type "bundle exec jekyll serve" to build site and serve to localhost:4000
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
pathFilesToBuild <- base::file.path("./Chapters/03/R_Chapter3/hoffman-ch3.Rmd")
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
# Build the report
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
"html_document"
#                       "ioslides_presentation"
),
clean=TRUE)
}
# To generate the static website from the htmls that have been printed in the code above
# 1) Select the "gh-pages" branch of your project's repository in GitHub client
# 2) Open command line terminal and change directory to the root folder of your repository that you've cloned onto your hard drive using GitHub client (type "cmd" in the address line of the File Explorer opened on root folder of your repository's clone)
# 3) type "bundle install" to install Bundler if you're creating the website for the first time
# 4) type "bundle exec jekyll serve" to build site and serve to localhost:4000
head(ds)
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
pathFilesToBuild <- base::file.path("./Chapters/03/R_Chapter3/hoffman-ch3.Rmd")
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
# Build the report
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
"html_document"
#                       "ioslides_presentation"
),
clean=TRUE)
}
# To generate the static website from the htmls that have been printed in the code above
# 1) Select the "gh-pages" branch of your project's repository in GitHub client
# 2) Open command line terminal and change directory to the root folder of your repository that you've cloned onto your hard drive using GitHub client (type "cmd" in the address line of the File Explorer opened on root folder of your repository's clone)
# 3) type "bundle install" to install Bundler if you're creating the website for the first time
# 4) type "bundle exec jekyll serve" to build site and serve to localhost:4000
p <- ggplot2::ggplot(ds,aes(x=time,y=m3.1)) # replace the outcome with model prediction
p <- p + geom_line(aes(group=PersonID, color=group))
p <- p + theme1
p <- p + scale_x_discrete(labels=c("Pre-Test","Post-Test"))
p <- p + scale_y_continuous(limits=c(30,70),
breaks=seq(30,70, by=5))
p <- p + facet_grid(.~group)
p <- p + labs(list(
title="Does treatment affect test performance?",
x="Times of observation", y="Test score"))
p
p <- ggplot2::ggplot(ds,aes(x=time,y=m3.1)) # replace the outcome with model prediction
p <- p + geom_line(aes(group=PersonID))
p <- p + theme1
p <- p + scale_x_discrete(labels=c("Pre-Test","Post-Test"))
p <- p + scale_y_continuous(limits=c(30,70),
breaks=seq(30,70, by=5))
p <- p + facet_grid(.~group)
p <- p + labs(list(
title="Does treatment affect test performance?",
x="Times of observation", y="Test score"))
p
p <- ggplot2::ggplot(ds,aes(x=time,y=outcome, group=PersonID))  # mapping for entire plot
p <- p + geom_line(aes(color=group)) # geom specific mapping
p <- p + geom_line(aes(y=m3.1))      # geom specific mapping
p <- p + theme1
p <- p + scale_x_discrete(labels=c("Pre-Test","Post-Test"))
p <- p + scale_y_continuous(limits=c(30,70),
breaks=seq(30,70, by=5))
p <- p + facet_grid(.~group)
p <- p + labs(list(
title="Does treatment affect test performance?",
x="Times of observation", y="Test score"))
p
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
pathFilesToBuild <- base::file.path("./Chapters/03/R_Chapter3/hoffman-ch3.Rmd")
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
# Build the report
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
"html_document"
#                       "ioslides_presentation"
),
clean=TRUE)
}
# To generate the static website from the htmls that have been printed in the code above
# 1) Select the "gh-pages" branch of your project's repository in GitHub client
# 2) Open command line terminal and change directory to the root folder of your repository that you've cloned onto your hard drive using GitHub client (type "cmd" in the address line of the File Explorer opened on root folder of your repository's clone)
# 3) type "bundle install" to install Bundler if you're creating the website for the first time
# 4) type "bundle exec jekyll serve" to build site and serve to localhost:4000
m3.2 <- lme4::lmer(outcome ~ 1 + (1|id), data=ds, REML=FALSE)# create model object
m3.2 # print basic info
summary(m3.2) # print a bit more info
ds$m3.2 <- predict(m3.2) # stores values predicted by the model
var(ds$outcome - ds$m3.2) # variance of the residual computed directly
sd(ds$outcome - ds$m3.2) # standard deviation of the residual computed directly
m3.2 <- lme4::lmer(outcome ~ 1 + (1|id), data=ds, REML=FALSE)# create model object
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
pathFilesToBuild <- base::file.path("./Chapters/03/R_Chapter3/hoffman-ch3.Rmd")
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
# Build the report
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
"html_document"
#                       "ioslides_presentation"
),
clean=TRUE)
}
# To generate the static website from the htmls that have been printed in the code above
# 1) Select the "gh-pages" branch of your project's repository in GitHub client
# 2) Open command line terminal and change directory to the root folder of your repository that you've cloned onto your hard drive using GitHub client (type "cmd" in the address line of the File Explorer opened on root folder of your repository's clone)
# 3) type "bundle install" to install Bundler if you're creating the website for the first time
# 4) type "bundle exec jekyll serve" to build site and serve to localhost:4000
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
pathFilesToBuild <- base::file.path("./Chapters/03/R_Chapter3/hoffman-ch3.Rmd")
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
# Build the report
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
"html_document"
#                       "ioslides_presentation"
),
clean=TRUE)
}
# To generate the static website from the htmls that have been printed in the code above
# 1) Select the "gh-pages" branch of your project's repository in GitHub client
# 2) Open command line terminal and change directory to the root folder of your repository that you've cloned onto your hard drive using GitHub client (type "cmd" in the address line of the File Explorer opened on root folder of your repository's clone)
# 3) type "bundle install" to install Bundler if you're creating the website for the first time
# 4) type "bundle exec jekyll serve" to build site and serve to localhost:4000
p <- ggplot2::ggplot(ds,aes(x=time,y=outcome, group=PersonID))  # mapping for entire plot
p <- p + geom_line(aes(color=group)) # geom specific mapping
p <- p + geom_line(aes(y=m3.2))      # geom specific mapping
p <- p + theme1
p <- p + scale_x_discrete(labels=c("Pre-Test","Post-Test"))
p <- p + scale_y_continuous(limits=c(30,70),
breaks=seq(30,70, by=5))
p <- p + facet_grid(.~group)
p <- p + labs(list(
title="Does treatment affect test performance?",
x="Times of observation", y="Test score"))
p
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
pathFilesToBuild <- base::file.path("./Chapters/03/R_Chapter3/hoffman-ch3.Rmd")
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
# Build the report
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
"html_document"
#                       "ioslides_presentation"
),
clean=TRUE)
}
# To generate the static website from the htmls that have been printed in the code above
# 1) Select the "gh-pages" branch of your project's repository in GitHub client
# 2) Open command line terminal and change directory to the root folder of your repository that you've cloned onto your hard drive using GitHub client (type "cmd" in the address line of the File Explorer opened on root folder of your repository's clone)
# 3) type "bundle install" to install Bundler if you're creating the website for the first time
# 4) type "bundle exec jekyll serve" to build site and serve to localhost:4000
m3.2 <- lme4::lmer(outcome ~ 1 + (1|PersonID), data=ds, REML=TRUE)# create model object
m3.2 # print basic info
m3.2 <- lme4::lmer(outcome ~ 1 + (1 | PersonID), data=ds)# create model object
m3.2 # print basic info
summary(m3.2) # print a bit more info
ds$m3.2 <- predict(m3.2) # stores values predicted by the model
var(ds$outcome - ds$m3.2) # variance of the residual computed directly
sd(ds$outcome - ds$m3.2) # standard deviation of the residual computed directly
m3.1
head(ds)
m3.2# model results
mo3.2 # model performance
View(ds)
sum(ds[ds$time==1,"m3.2"])
ds$time==1
sum(ds[ds$time=="Pre-Test","m3.2"])
sum(ds[ds$time=="Pre-Test","m3.2"])/100
sum(ds[ds$time=="Post-Test","m3.2"] )/100
ds$dm1 <- ds$outcome - ds$m3.1
ds$dm2 <- ds$outcome - ds$m3.2
head(ds)
sum(ds$dm1)/100
sum(ds$dm1)
sum(ds$dm1)
head(ds)
# 4) type "bundle exec jekyll serve" to build site and serve to localhost:4000
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
pathFilesToBuild <- base::file.path("./Chapters/03/R_Chapter3/hoffman-ch3.Rmd")
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
# Build the report
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
"html_document"
#                       "ioslides_presentation"
),
clean=TRUE)
}
# To generate the static website from the htmls that have been printed in the code above
# 1) Select the "gh-pages" branch of your project's repository in GitHub client
# 2) Open command line terminal and change directory to the root folder of your repository that you've cloned onto your hard drive using GitHub client (type "cmd" in the address line of the File Explorer opened on root folder of your repository's clone)
# 3) type "bundle install" to install Bundler if you're creating the website for the first time
# 4) type "bundle exec jekyll serve" to build site and serve to localhost:4000
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
pathFilesToBuild <- base::file.path("./Chapters/03/R_Chapter3/hoffman-ch3.Rmd")
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
# Build the report
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
"html_document"
#                       "ioslides_presentation"
),
clean=TRUE)
}
# To generate the static website from the htmls that have been printed in the code above
# 1) Select the "gh-pages" branch of your project's repository in GitHub client
# 2) Open command line terminal and change directory to the root folder of your repository that you've cloned onto your hard drive using GitHub client (type "cmd" in the address line of the File Explorer opened on root folder of your repository's clone)
# 3) type "bundle install" to install Bundler if you're creating the website for the first time
# 4) type "bundle exec jekyll serve" to build site and serve to localhost:4000
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
pathFilesToBuild <- base::file.path("./Chapters/03/R_Chapter3/hoffman-ch3.Rmd")
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
# Build the report
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
"html_document"
#                       "ioslides_presentation"
),
clean=TRUE)
}
# To generate the static website from the htmls that have been printed in the code above
# 1) Select the "gh-pages" branch of your project's repository in GitHub client
# 2) Open command line terminal and change directory to the root folder of your repository that you've cloned onto your hard drive using GitHub client (type "cmd" in the address line of the File Explorer opened on root folder of your repository's clone)
# 3) type "bundle install" to install Bundler if you're creating the website for the first time
# 4) type "bundle exec jekyll serve" to build site and serve to localhost:4000
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
pathFilesToBuild <- base::file.path("./Chapters/03/R_Chapter3/hoffman-ch3.Rmd")
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
# Build the report
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
"html_document"
#                       "ioslides_presentation"
),
clean=TRUE)
}
# To generate the static website from the htmls that have been printed in the code above
# 1) Select the "gh-pages" branch of your project's repository in GitHub client
# 2) Open command line terminal and change directory to the root folder of your repository that you've cloned onto your hard drive using GitHub client (type "cmd" in the address line of the File Explorer opened on root folder of your repository's clone)
# 3) type "bundle install" to install Bundler if you're creating the website for the first time
# 4) type "bundle exec jekyll serve" to build site and serve to localhost:4000
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
pathFilesToBuild <- base::file.path("./Chapters/03/R_Chapter3/hoffman-ch3.Rmd")
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
# Build the report
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
"html_document"
#                       "ioslides_presentation"
),
clean=TRUE)
}
# To generate the static website from the htmls that have been printed in the code above
# 1) Select the "gh-pages" branch of your project's repository in GitHub client
# 2) Open command line terminal and change directory to the root folder of your repository that you've cloned onto your hard drive using GitHub client (type "cmd" in the address line of the File Explorer opened on root folder of your repository's clone)
# 3) type "bundle install" to install Bundler if you're creating the website for the first time
# 4) type "bundle exec jekyll serve" to build site and serve to localhost:4000
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
pathFilesToBuild <- base::file.path("./Chapters/03/R_Chapter3/hoffman-ch3.Rmd")
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
# Build the report
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
"html_document"
#                       "ioslides_presentation"
),
clean=TRUE)
}
# To generate the static website from the htmls that have been printed in the code above
# 1) Select the "gh-pages" branch of your project's repository in GitHub client
# 2) Open command line terminal and change directory to the root folder of your repository that you've cloned onto your hard drive using GitHub client (type "cmd" in the address line of the File Explorer opened on root folder of your repository's clone)
# 3) type "bundle install" to install Bundler if you're creating the website for the first time
# 4) type "bundle exec jekyll serve" to build site and serve to localhost:4000
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
pathFilesToBuild <- base::file.path("./Chapters/03/R_Chapter3/hoffman-ch3.Rmd")
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
# Build the report
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
"html_document"
#                       "ioslides_presentation"
),
clean=TRUE)
}
# To generate the static website from the htmls that have been printed in the code above
# 1) Select the "gh-pages" branch of your project's repository in GitHub client
# 2) Open command line terminal and change directory to the root folder of your repository that you've cloned onto your hard drive using GitHub client (type "cmd" in the address line of the File Explorer opened on root folder of your repository's clone)
# 3) type "bundle install" to install Bundler if you're creating the website for the first time
# 4) type "bundle exec jekyll serve" to build site and serve to localhost:4000
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
pathFilesToBuild <- base::file.path("./Chapters/03/R_Chapter3/hoffman-ch3.Rmd")
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
# Build the report
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
"html_document"
#                       "ioslides_presentation"
),
clean=TRUE)
}
# To generate the static website from the htmls that have been printed in the code above
# 1) Select the "gh-pages" branch of your project's repository in GitHub client
# 2) Open command line terminal and change directory to the root folder of your repository that you've cloned onto your hard drive using GitHub client (type "cmd" in the address line of the File Explorer opened on root folder of your repository's clone)
# 3) type "bundle install" to install Bundler if you're creating the website for the first time
# 4) type "bundle exec jekyll serve" to build site and serve to localhost:4000
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
# patternToBuild <- "(?<!README)\\.Rmd$" #Gets all 'Rmd' , that aren't named `README`.
patternToBuild <- "(?<!README)\\.(R){0,1}md$" #Gets all 'Rmd' and 'md' files, that aren't named `README`.
pathFilesToBuild <- list.files(full.names=TRUE, recursive=TRUE)
pathFilesToBuild <- grep(patternToBuild, pathFilesToBuild, perl=TRUE, value=TRUE)
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
"html_document"
),
clean=TRUE)
}
base::system("bundle exec jekyll build")
