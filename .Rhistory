library(psych) # data summary + etc
library(ggplot2) # graphing
library(nlme) # estimate fixed models | esp. gls()
library(lme4) # estimate mixed models | esp. lmer()
library(arm)  # process model objects
## @knitr LoadData
ds0 <- readRDS("~/GitHub/psy564/Data/Raw/ELSA/ds0_ELSA.rds")
dim(ds0)
length(unique(ds0$PID))
head(ds0)
# remove all elements for a clean start
rm(list=ls(all=TRUE))
cat("\014")
## @knitr InstallPackage
# source("./Scripts/Utility/InstallPackages.R")
## @knitr LoadPackages
require(sas7bdat) # for inputting data
library(dplyr) # for general data manipulation
library(reshape2) # for data : wide <-> long
library(psych) # data summary + etc
library(ggplot2) # graphing
library(nlme) # estimate fixed models | esp. gls()
library(lme4) # estimate mixed models | esp. lmer()
library(arm)  # process model objects
## @knitr LoadData
ds0 <- readRDS("~/GitHub/psy564/Data/Raw/ELSA/ds0_ELSA.rds")
dim(ds0)
length(unique(ds0$PID))
head(ds0)
dsL <- ds0
## @knitr DataFilter
dsM <- dsL
table(dsM$irecall,dsM$wave, useNA="ifany")
# There are no valid respondes to the focal outcome, so we remove wave 5
# Wave 0 doesn't not contain observations of interest, so remove wave 0
dsM <- dplyr::filter(dsM, wave %in% c(1:4))
table(dsM$irecall,dsM$wave, useNA="ifany")
# The missing values will complecate some of the modeling so remove for now
## @knitr DataFilter2
# Selecting individuals into the working dataset
length(unique(dsM$id))
table(dsM$wave)
dsM <- dplyr::filter(dsM, (ave(!is.na(irecall), id, FUN = all))) # only complete trajectoies
length(unique(dsM$id))
table(dsM$wave)
dsM <- dsM[dsM$id %in% unique((dsM[dsM$wave==4,c("id","wave")])$id ),] # only who reached 4th wave
length(unique(dsM$id))
table(dsM$wave)
baseSize <- 12 # set as the point of further reference
theme1 <- ggplot2::theme_bw(base_size=baseSize) +
ggplot2::theme(title=ggplot2::element_text(colour="gray20",size = baseSize+1)) +
ggplot2::theme(axis.text=ggplot2::element_text(colour="gray40", size=baseSize-2)) +
ggplot2::theme(axis.title=ggplot2::element_text(colour="gray40")) +
ggplot2::theme(panel.border = ggplot2::element_rect(colour="gray80")) +
ggplot2::theme(axis.ticks.length = grid::unit(0, "cm")) +
ggplot2::theme(text = element_text(size =baseSize+7))
p <- ggplot2::ggplot(dsM, aes(y=irecall,x=factor(year), fill=condition))
p <- p + geom_violin( adjust=1, alpha=.4 )
p <- p + scale_y_continuous(limits=c(0,10), breaks=seq(0,10,by=1))
p <- p + scale_fill_manual(values=paletteColor4conditions)
p <- p + geom_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
p <- p + stat_summary(fun.y=mean, geom="point", fill="white", shape=21, size=4)
p <- p + facet_grid(dbts ~ hptn)
p <- p + theme1
p
## @knitr LoadGraphThemes
paletteColor4conditions <- c("Hypertension"="red",
"Diabetes"="blue",
"Both"="purple",
"None"="grey10")
baseSize <- 12 # set as the point of further reference
theme1 <- ggplot2::theme_bw(base_size=baseSize) +
ggplot2::theme(title=ggplot2::element_text(colour="gray20",size = baseSize+1)) +
ggplot2::theme(axis.text=ggplot2::element_text(colour="gray40", size=baseSize-2)) +
ggplot2::theme(axis.title=ggplot2::element_text(colour="gray40")) +
ggplot2::theme(panel.border = ggplot2::element_rect(colour="gray80")) +
ggplot2::theme(axis.ticks.length = grid::unit(0, "cm")) +
ggplot2::theme(text = element_text(size =baseSize+7))
## @knitr CrossSectionDist
# Cross-sectional view: irecall
p <- ggplot2::ggplot(dsM, aes(y=irecall,x=factor(year), fill=condition))
p <- p + geom_violin( adjust=1, alpha=.4 )
p <- p + scale_y_continuous(limits=c(0,10), breaks=seq(0,10,by=1))
p <- p + scale_fill_manual(values=paletteColor4conditions)
p <- p + geom_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
p <- p + stat_summary(fun.y=mean, geom="point", fill="white", shape=21, size=4)
p <- p + facet_grid(dbts ~ hptn)
p <- p + theme1
p
## @knitr CrossSectionCount
# Cross-sectional view: frequence of irecall
p <- ggplot2::ggplot(dsM, aes(x=factor(year)))
p <- p + scale_y_continuous(breaks=seq(0,6000,by=1000))
p <- p + geom_bar(aes(fill=condition), alpha=.4)
p <- p + facet_grid(dbts ~ hptn)
p <- p + scale_fill_manual(values=paletteColor4conditions)
p <- p + guides(fill = guide_legend(reverse=F, title="Diagnosis at A"))
p <- p + theme1
p
## @knitr EasyData
ds <- dplyr::filter(dsM, id %in% sample(unique(id),100)) %>% # select only N ids
dplyr::select(id, dob, female, hptn, dbts, condition, year, time, Age, irecall,animal,prospect, drecall)
head(ds)
str(ds)
# remove all elements for a clean start
rm(list=ls(all=TRUE))
cat("\014")
## @knitr InstallPackage
# source("./Scripts/Utility/InstallPackages.R")
## @knitr LoadPackages
require(sas7bdat) # for inputting data
library(dplyr) # for general data manipulation
library(reshape2) # for data : wide <-> long
library(psych) # data summary + etc
library(ggplot2) # graphing
library(nlme) # estimate fixed models | esp. gls()
library(lme4) # estimate mixed models | esp. lmer()
library(arm)  # process model objects
## @knitr LoadData
ds0 <- readRDS("~/GitHub/psy564/Data/Raw/ELSA/ds0_ELSA.rds")
dim(ds0)
length(unique(ds0$PID))
head(ds0)
table(dsM$irecall,dsM$wave, useNA="ifany")
table(dsM$irecall,dsM$wave, useNA="ifany")
# remove all elements for a clean start
rm(list=ls(all=TRUE))
cat("\014")
## @knitr InstallPackage
# source("./Scripts/Utility/InstallPackages.R")
## @knitr LoadPackages
require(sas7bdat) # for inputting data
library(dplyr) # for general data manipulation
library(reshape2) # for data : wide <-> long
library(psych) # data summary + etc
library(ggplot2) # graphing
library(nlme) # estimate fixed models | esp. gls()
library(lme4) # estimate mixed models | esp. lmer()
library(arm)  # process model objects
## @knitr LoadData
ds0 <- readRDS("~/GitHub/psy564/Data/Raw/ELSA/ds0_ELSA.rds")
dim(ds0)
length(unique(ds0$PID))
head(ds0)
dsL <- ds0
## @knitr DataFilter
dsM <- dsL
table(dsM$irecall,dsM$wave, useNA="ifany")
dsM <- dplyr::filter(dsM, wave %in% c(1:4))
table(dsM$irecall,dsM$wave, useNA="ifany")
>>>>>>> origin/master
ds0 <- readRDS("~/GitHub/psy564/Data/Raw/ELSA/ds0_ELSA.rds")
dsELSA <- readRDS("~/GitHub/psy564/Data/Raw/ELSA/dsELSA.rds")
View(ds0)
View(ds0)
View(ds0)
View(dsELSA)
names(ds0)
ht, db, htdb, none, angina=ang1A, stroke=stk1A, smoked=evrsmk1A,
ds <- dplyr::select(ds0, id, dob, age, sex,
ht, db, htdb, none, angina=ang1A, stroke=stk1A, smoked=evrsmk1A,
time, wave, year, Age,
irecall, drecall, animal, prospect)
ht, db, htdb, nocase, angina=ang1A, stroke=stk1A, smoked=evrsmk1A,
time, wave, year, Age,
ds <- dplyr::select(ds0, id, dob, age, sex,
ht, db, htdb, nocase, angina=ang1A, stroke=stk1A, smoked=evrsmk1A,
time, wave, year, Age,
irecall, drecall, animal, prospect)
View(ds)
baseSize <- 12 # set as the point of further reference
theme1 <- ggplot2::theme_bw(base_size=baseSize) +
ggplot2::theme(title=ggplot2::element_text(colour="gray20",size = baseSize+1)) +
ggplot2::theme(axis.text=ggplot2::element_text(colour="gray40", size=baseSize-2)) +
ggplot2::theme(axis.title=ggplot2::element_text(colour="gray40")) +
ggplot2::theme(panel.border = ggplot2::element_rect(colour="gray80")) +
ggplot2::theme(axis.ticks.length = grid::unit(0, "cm")) +
ggplot2::theme(text = element_text(size =baseSize+7))
# remove all elements for a clean start
rm(list=ls(all=TRUE))
cat("\014")
## @knitr InstallPackage
# source("./Scripts/Utility/InstallPackages.R")
## @knitr LoadPackages
require(sas7bdat) # for inputting data
library(dplyr) # for general data manipulation
library(reshape2) # for data : wide <-> long
library(psych) # data summary + etc
library(ggplot2) # graphing
library(nlme) # estimate fixed models | esp. gls()
library(lme4) # estimate mixed models | esp. lmer()
library(arm)  # process model objects
## @knitr LoadData
ds0 <- readRDS("~/GitHub/psy564/Data/Raw/ELSA/ds0_ELSA.rds")
dim(ds0)
length(unique(ds0$PID))
head(ds0)
dsL <- ds0
## @knitr DataFilter
dsM <- dsL
table(dsM$irecall,dsM$wave, useNA="ifany")
# There are no valid respondes to the focal outcome, so we remove wave 5
# Wave 0 doesn't not contain observations of interest, so remove wave 0
dsM <- dplyr::filter(dsM, wave %in% c(1:4))
table(dsM$irecall,dsM$wave, useNA="ifany")
# The missing values will complecate some of the modeling so remove for now
## @knitr DataFilter2
# Selecting individuals into the working dataset
length(unique(dsM$id))
table(dsM$wave)
dsM <- dplyr::filter(dsM, (ave(!is.na(irecall), id, FUN = all))) # only complete trajectoies
length(unique(dsM$id))
table(dsM$wave)
dsM <- dsM[dsM$id %in% unique((dsM[dsM$wave==4,c("id","wave")])$id ),] # only who reached 4th wave
length(unique(dsM$id))
table(dsM$wave)
saveRDS(object=dsM, file="~/GitHub/psy564/Data/Derived/ELSA/dsM_ELSA.rds", compress="xz")
## @knitr LoadGraphThemes
paletteColor4conditions <- c("Hypertension"="red",
"Diabetes"="blue",
"Both"="purple",
"None"="grey10")
baseSize <- 12 # set as the point of further reference
theme1 <- ggplot2::theme_bw(base_size=baseSize) +
ggplot2::theme(title=ggplot2::element_text(colour="gray20",size = baseSize+1)) +
ggplot2::theme(axis.text=ggplot2::element_text(colour="gray40", size=baseSize-2)) +
ggplot2::theme(axis.title=ggplot2::element_text(colour="gray40")) +
ggplot2::theme(panel.border = ggplot2::element_rect(colour="gray80")) +
ggplot2::theme(axis.ticks.length = grid::unit(0, "cm")) +
ggplot2::theme(text = element_text(size =baseSize+7))
## @knitr CrossSectionDist
# Cross-sectional view: irecall
p <- ggplot2::ggplot(dsM, aes(y=irecall,x=factor(year), fill=condition))
p <- p + geom_violin( adjust=1, alpha=.4 )
p <- p + scale_y_continuous(limits=c(0,10), breaks=seq(0,10,by=1))
p <- p + scale_fill_manual(values=paletteColor4conditions)
p <- p + geom_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
p <- p + stat_summary(fun.y=mean, geom="point", fill="white", shape=21, size=4)
p <- p + facet_grid(dbts ~ hptn)
p <- p + theme1
p
## @knitr CrossSectionCount
# Cross-sectional view: frequence of irecall
p <- ggplot2::ggplot(dsM, aes(x=factor(year)))
p <- p + scale_y_continuous(breaks=seq(0,6000,by=1000))
p <- p + geom_bar(aes(fill=condition), alpha=.4)
p <- p + facet_grid(dbts ~ hptn)
p <- p + scale_fill_manual(values=paletteColor4conditions)
p <- p + guides(fill = guide_legend(reverse=F, title="Diagnosis at A"))
p <- p + theme1
p
ds <- dplyr::filter(dsL, id %in% sample(unique(id),100)) %>% # select only N ids
dplyr::select(id, dob, female, hptn, dbts, condition, year, time, Age, irecall,animal,prospect, drecall)
head(ds)
ds <- dplyr::filter(dsL, id %in% sample(unique(id),100)) %>% # select only N ids
dplyr::select(id, dob, female, wave, year, time, Age, irecall,animal,prospect, drecall)
head(ds)
ds <- dplyr::filter(dsL, id %in% sample(unique(id),100)) %>% # select only N ids
dplyr::select(id, dob, female, age80, edu11,wave, year, time, Age, irecall,animal,prospect, drecall)
head(ds)
# remove all elements for a clean start
rm(list=ls(all=TRUE))
cat("\014")
## @knitr InstallPackage
# source("./Scripts/Utility/InstallPackages.R")
## @knitr LoadPackages
require(sas7bdat) # for inputting data
library(dplyr) # for general data manipulation
library(reshape2) # for data : wide <-> long
library(psych) # data summary + etc
library(ggplot2) # graphing
library(nlme) # estimate mixed models | esp. gls()
library(lme4) # estimate mixed models | esp. lmer()
library(arm)  # process model objects
## @knitr LoadData
pathDir  <- getwd() # get working directory, e.i. residence of .Rproj file
pathFile  <- file.path(pathDir,"Chapters/05/SAS_Chapter5/SAS_Chapter5.sas7bdat") # location of the file
ds0   <- read.sas7bdat(pathFile, debug=TRUE) # import file
# ds0 <- readRDS("~/GitHub/psy564/Data/Raw/ELSA/ds0_ELSA.rds")
ds0 <- data.frame(ds0) # save as a data frame
## @knitr BasicDescriptive
class(ds0) # what class?
dim(ds0)  # what dimensions?
names(ds0) # what are column names?
str(ds0) # what its structure?
head(ds0) # what do first few lines look like?
base::summary(ds0) # basic summary
psych::describe(ds0) # summary by psych package
table(ds0$wave)# one-way table
## @knitr StackData
dsL <- ds0
## @knitr TweakLong
dsM <- dsL
## @knitr dummyChunk
#### Basic Graphs  ####
## @knitr GraphingData0
p <- ggplot2::ggplot(dsM,aes(x=wave,y=outcome)) # map data dimension
p <- p + geom_line(aes(group=PersonID)) # draw lines and map unit of measurement
p
## @knitr LoadGraphThemes
baseSize <- 12 # set as the point of further reference
theme1 <- ggplot2::theme_bw(base_size=baseSize) +
ggplot2::theme(title=ggplot2::element_text(colour="gray20",size = baseSize+1)) +
ggplot2::theme(axis.text=ggplot2::element_text(colour="gray40", size=baseSize-2)) +
ggplot2::theme(axis.title=ggplot2::element_text(colour="gray40")) +
ggplot2::theme(panel.border = ggplot2::element_rect(colour="gray80")) +
ggplot2::theme(axis.ticks.length = grid::unit(0, "cm")) +
ggplot2::theme(text = element_text(size =baseSize+7))
## @knitr GraphingData1
p <- ggplot2::ggplot(dsM,aes(x=wave,y=outcome))
p <- p + geom_line(aes(group=PersonID)) # draw lines
p <- p + theme1
p <- p + scale_x_continuous(limits=c(1,4), breaks=c(1:4)) # X axis
p <- p + scale_y_continuous(limits=c(5,25),
breaks=seq(5,25, by=5)) # Y axis
p <- p + labs(list(
title="Does outcome change over time?", # main title
x="Wave of measurement", y="Performance on the outcome")) # axes titles
p
p <- ggplot2::ggplot(dsM,aes(x=wave,y=outcome))
p <- p + geom_line(aes(group=PersonID))
p <- p + geom_point(size=6, shape=21, fill="purple", color="black", alpha=.5)
p <- p + theme1
p <- p + scale_x_continuous(limits=c(1,4), breaks=c(1:4)) # X axis
p <- p + scale_y_continuous(limits=c(5,25),
breaks=seq(5,25, by=5)) # Y axis
p <- p + labs(list(
title="Does outcome change over time?", # main title
x="Wave of measurement", y="Performance on the outcome")) # axes titles
p
p <- ggplot2::ggplot(dsM,aes(x=wave, y=outcome))
p <- p + geom_line(aes(group=PersonID), color="firebrick", alpha=.5)  # individual trajectories
p <- p + geom_point(size=3, shape=21, fill=NA, color="black", alpha=.4) # cross-section data points
p <- p + geom_line(aes(y=m3.1, group=PersonID), color="royalblue3", size=3, alpha=.05) # modelled data
p <- p + theme1
p <- p + scale_x_continuous(limits=c(1,4), breaks=c(1:4)) # X axis
p <- p + scale_y_continuous(limits=c(5,25),
breaks=seq(5,25, by=1)) # Y axis
p <- p + labs(list(
title="Does outcome change over time?", # main title
x="Wave of measurement", y="Performance on the outcome")) # axes titles
p
## @knitr InspectM3_1
model  <- m3.1 # rename object for generic use
logLik <- summary(model)$logLik # extract log likelihood
deviance <- -2*logLik # extract deviance
AIC <- AIC(model) # extract Akaike information criterion
BIC <- BIC(model) # extract Bayesian information criterion
df.resid <- NA # empty slot for later use
N <- summary(model)$dims$N  # Number of distinct data points
p <- summary(model)$dims$p  # Number of estimated parameters
ids <- length(unique(dsM$PersonID)) # Number of unique units
df.resid <- N-p # residual degrees of freedom
mInfo <- data.frame("logLik" = logLik,   # collect model information indo a dataframe
"deviance"= deviance,
"AIC" = AIC, "BIC" = BIC,
"df.resid" = df.resid, "N" = N,
"p" = p, "ids" = ids)
t<- t(mInfo) # transpose
rownames(t)<-colnames(mInfo) # rename rows
mInfo<- data.frame(new=t) # turn into a dataframe
colnames(mInfo) <- c("m3.1") # rename columns
mi3.1 <- mInfo # save (m)odel (o)utput of model (3.1)
mi3.1$Coefficient <- rownames(mi3.1) # create a column with the name of each index
m3.1 #  model results
mi3.1 #  model information
head(dsM) # visual check
## @knitr GraphM3_1
p <- ggplot2::ggplot(dsM,aes(x=wave, y=outcome))
p <- p + geom_line(aes(group=PersonID), color="firebrick", alpha=.5)  # individual trajectories
p <- p + geom_point(size=3, shape=21, fill=NA, color="black", alpha=.4) # cross-section data points
p <- p + geom_line(aes(y=m3.1, group=PersonID), color="royalblue3", size=3, alpha=.05) # modelled data
p <- p + theme1
p <- p + scale_x_continuous(limits=c(1,4), breaks=c(1:4)) # X axis
p <- p + scale_y_continuous(limits=c(5,25),
breaks=seq(5,25, by=1)) # Y axis
p <- p + labs(list(
title="Does outcome change over time?", # main title
x="Wave of measurement", y="Performance on the outcome")) # axes titles
p
m3.1 <- nlme::gls(outcome ~ 1, data=dsM, method="ML") # create model object
dsM$m3.1 <- predict(m3.1) # stores values predicted by the model
summary(m3.1) # print a bit more info
# str(summary(m3.1)) # to inspect object directly
## @knitr GraphM3_1
p <- ggplot2::ggplot(dsM,aes(x=wave, y=outcome))
p <- p + geom_line(aes(group=PersonID), color="firebrick", alpha=.5)  # individual trajectories
p <- p + geom_point(size=3, shape=21, fill=NA, color="black", alpha=.4) # cross-section data points
p <- p + geom_line(aes(y=m3.1, group=PersonID), color="royalblue3", size=3, alpha=.05) # modelled data
p <- p + theme1
p <- p + scale_x_continuous(limits=c(1,4), breaks=c(1:4)) # X axis
p <- p + scale_y_continuous(limits=c(5,25),
breaks=seq(5,25, by=1)) # Y axis
p <- p + labs(list(
title="Does outcome change over time?", # main title
x="Wave of measurement", y="Performance on the outcome")) # axes titles
p
# remove all elements for a clean start
rm(list=ls(all=TRUE))
cat("\014")
## @knitr InstallPackage
# source("./Scripts/Utility/InstallPackages.R")
## @knitr LoadPackages
require(sas7bdat) # for inputting data
library(dplyr) # for general data manipulation
library(reshape2) # for data : wide <-> long
library(psych) # data summary + etc
library(ggplot2) # graphing
library(nlme) # estimate fixed models | esp. gls()
library(lme4) # estimate mixed models | esp. lmer()
library(arm)  # process model objects
## @knitr LoadData
dsL <- readRDS("~/GitHub/psy564/Data/Raw/ELSA/dsL_ELSA.rds")
dsL <- readRDS("~/GitHub/psy564/Data/Derived/ELSA/dsL_ELSA.rds")
ds <- dplyr::filter(dsL, id %in% sample(unique(id),100)) %>% # select only N ids
dplyr::select(id, dob, female, hptn, dbts, condition, year, time, Age, irecall,animal,prospect, drecall)
head(ds)
## @knitr LoadGraphThemes
paletteColor4conditions <- c("Hypertension"="red",
"Diabetes"="blue",
"Both"="purple",
"None"="grey10")
baseSize <- 12 # set as the point of further reference
theme1 <- ggplot2::theme_bw(base_size=baseSize) +
ggplot2::theme(title=ggplot2::element_text(colour="gray20",size = baseSize+1)) +
ggplot2::theme(axis.text=ggplot2::element_text(colour="gray40", size=baseSize-2)) +
ggplot2::theme(axis.title=ggplot2::element_text(colour="gray40")) +
ggplot2::theme(panel.border = ggplot2::element_rect(colour="gray80")) +
ggplot2::theme(axis.ticks.length = grid::unit(0, "cm")) +
ggplot2::theme(text = element_text(size =baseSize+7))
## @knitr irecall_0R_1F_2x_x
p <- ggplot2::ggplot(ds,aes(x=wave, y=irecall))
p <- p + geom_line(aes(group=id), color="firebrick", alpha=.5)  # individual trajectories
p <- p + geom_point(size=3, shape=21, fill=NA, color="black", alpha=.4) # cross-section data points
# p <- p + geom_line(aes(y=m3.1, group=id), color="royalblue3", size=3, alpha=.05) # modelled data
p <- p + theme1
p <- p + scale_x_continuous(limits=c(1,4), breaks=c(1:4)) # X axis
p <- p + scale_y_continuous(limits=c(5,25),
breaks=seq(5,25, by=1)) # Y axis
p <- p + labs(list(
title="Does outcome change over time?", # main title
x="Wave of measurement", y="Performance on the outcome")) # axes titles
p
## @knitr EasyData
ds <- dplyr::filter(dsL, id %in% sample(unique(id),100)) %>% # select only N ids
dplyr::select(id, dob, female, age80, edu11, hptn, dbts, condition, wave, year, time, Age, irecall,animal,prospect, drecall)
head(ds)
p <- ggplot2::ggplot(ds,aes(x=wave, y=irecall))
p <- p + geom_line(aes(group=id), color="firebrick", alpha=.5)  # individual trajectories
p <- p + geom_point(size=3, shape=21, fill=NA, color="black", alpha=.4) # cross-section data points
# p <- p + geom_line(aes(y=m3.1, group=id), color="royalblue3", size=3, alpha=.05) # modelled data
p <- p + theme1
p <- p + scale_x_continuous(limits=c(1,4), breaks=c(1:4)) # X axis
p <- p + scale_y_continuous(limits=c(5,25),
breaks=seq(5,25, by=1)) # Y axis
p <- p + labs(list(
title="Does outcome change over time?", # main title
x="Wave of measurement", y="Performance on the outcome")) # axes titles
p
p <- ggplot2::ggplot(ds,aes(x=wave, y=irecall))
p <- p + geom_line(aes(group=id), color="firebrick", alpha=.5)  # individual trajectories
p <- p + geom_point(size=3, shape=21, fill=NA, color="black", alpha=.4) # cross-section data points
# p <- p + geom_line(aes(y=m3.1, group=id), color="royalblue3", size=3, alpha=.05) # modelled data
p <- p + theme1
p <- p + scale_x_continuous(limits=c(1,4), breaks=c(1:4)) # X axis
p <- p + scale_y_continuous(limits=c(0,10),
breaks=seq(0,10, by=1)) # Y axis
p <- p + labs(list(
title="Does outcome change over time?", # main title
x="Wave of measurement", y="Performance on the outcome")) # axes titles
p
ds$int <- 2
ds$linear <- .3
ds$quad <- .1
head(ds)
## @knitr CrossSectionCount
# Cross-sectional view: frequence of irecall
p <- ggplot2::ggplot(dsL, aes(x=factor(year)))
p <- p + scale_y_continuous(breaks=seq(0,6000,by=1000))
p <- p + geom_bar(aes(fill=condition), alpha=.4)
p <- p + facet_grid(dbts ~ hptn)
p <- p + scale_fill_manual(values=paletteColor4conditions)
p <- p + guides(fill = guide_legend(reverse=F, title="Diagnosis at A"))
p <- p + theme1
p
p <- ggplot2::ggplot(dsL, aes(y=irecall,x=factor(year), fill=condition))
p <- p + geom_violin( adjust=1, alpha=.4 )
p <- p + scale_y_continuous(limits=c(0,10), breaks=seq(0,10,by=1))
p <- p + scale_fill_manual(values=paletteColor4conditions)
p <- p + geom_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
p <- p + stat_summary(fun.y=mean, geom="point", fill="white", shape=21, size=4)
p <- p + facet_grid(dbts ~ hptn)
p <- p + theme1
p
# remove all elements for a clean start
rm(list=ls(all=TRUE))
cat("\014")
## @knitr InstallPackage
# source("./Scripts/Utility/InstallPackages.R")
## @knitr LoadPackages
require(sas7bdat) # for inputting data
library(dplyr) # for general data manipulation
library(reshape2) # for data : wide <-> long
library(psych) # data summary + etc
library(ggplot2) # graphing
library(nlme) # estimate fixed models | esp. gls()
library(lme4) # estimate mixed models | esp. lmer()
library(arm)  # process model objects
## @knitr LoadData
ds0 <- readRDS("~/GitHub/psy564/Data/Raw/ELSA/ds0_ELSA.rds")
dim(ds0)
View(ds0)
