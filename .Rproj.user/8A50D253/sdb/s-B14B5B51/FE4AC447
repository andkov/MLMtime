{
    "contents" : "# remove all elements for a clean start\nrm(list=ls(all=TRUE))\ncat(\"\\014\")\n\n\n## @knitr InstallPackage\n# source(\"./Scripts/Utility/InstallPackages.R\")\n\n\n\n## @knitr LoadPackages\nrequire(sas7bdat) # for inputting data \nlibrary(dplyr) # for general data manipulation\nlibrary(reshape2) # for data : wide <-> long\nlibrary(psych) # data summary + etc\nlibrary(ggplot2) # graphing\nlibrary(nlme) # estimate fixed models | esp. gls()\nlibrary(lme4) # estimate mixed models | esp. lmer()\nlibrary(arm)  # process model objects\n\n## @knitr LoadDataInitial\n# pathDir <- getwd() # establish home directory\n# pathELSA <- file.path(pathDir,\"Data/Raw/ELSArn_Disease Groups BL at W1_long to wide_141024.dat\")\n# \n# # record variable names from MPlus script \n# namesELSA <- c( \"PID\", \"dob\", \"time\", \"yrseducA\", \"sexrA\", \"age1A\", \"htnonly1A\", \"dmonly1A\", \"htndm1A\",  \"noncase1A\", \"ang1A\", \"chf1A\", \"mi1A\", \"stk1A\", \"cogflg1A\", \"evrsmk1A\", \"htnw1A\", \"dmw1A\", \"irecall\", \"animal\", \"prospect\", \"drecall\") \n# \n# # Import data \n# dsELSA <- read.table(pathELSA,col.names = namesELSA)\n# # Remove illegal values. \n# for( variable in names(dsELSA) ){\n#   dsELSA[,variable]=ifelse(dsELSA[,variable] %in% c(999),NA,dsELSA[,variable])\n# }\n\n## @knitr DummyChunck\n#### ds0 ####\n\n\n## @knitr LoadData\nds0 <- readRDS(\"./Data/Derived/Unshared/dsELSA.rds\")\ndim(ds0)\nlength(unique(ds0$PID))\nhead(ds0)\n\n# # \n# # ## @knitr BasicDescriptive\n# class(ds0) # what class?\n# dim(ds0)  # what dimensions?\n# names(ds0) # what are column names?\n# str(ds0) # what its structure?\n# head(ds0) # what do first few lines look like?\n# base::summary(ds0) # basic summary\n# psych::describe(ds0) # summary by psych package\n# table(ds0$wave)# one-way table\n\n\n## @knitr DescribeVariables \n\n# PID - individual  identifier\n# sexrA - sex of subject at the initial round A (wave 0)\n# age1A - age of subjects in years at the initial round A (wave 0)\n# yrseducA -\n# htnonly1A - \n# dmonly1A - \n# htndm1A - \n# noncase1A - \n# ang1A - \n# chf1A - \n# mi1A - \n# stk1A -  \n# cogflg1A -  \n# evrsmk1A -  \n# htnw1A -  \n# dmw1A - \n# irecall - \n# nimal - \n# prospect -  \n# drecall - \n\n# rename the basic variabels here, for compatibility of dsL stages from MAP and OCTO studies\nds0 <- dplyr::filter(ds0, \n                     cogflg1A==0) %>%  # select without cognitive flag at wave A\n  dplyr::select(id=PID, dob, sex=sexrA, age=age1A, edu=yrseducA,  \n                ht=htnonly1A, db=dmonly1A, htdb = htndm1A, nocase = noncase1A,\n                ang1A, chf1A, mi1A, stk1A, cogflg1A, evrsmk1A, htnw1A, dmw1A, \n                 time,\n                irecall,animal,prospect, drecall )\n\nhead(ds0) \n\n\n## @knitr DummyChunck\n#### dsL ####\n\n\n## @knitr StackData\ndsL <- ds0 # dsL descends from ds0\n\n## @knitr TweakLong\ndsL$irecall <- as.numeric(dsL$irecall) # force to numeric\n\n# Create centered variables age (80) and education (11)\ndsL <- dplyr::mutate(dsL,age80 = age-80, edu11=edu-11)\n\n# Create Hypertension and Diabetes dummies\ndsL[,\"hptn\"]= ifelse( (dsL[,\"ht\"]==1) | (dsL[,\"htdb\"]==1), 1,0 )\ndsL[,\"dbts\"]= ifelse( (dsL[,\"db\"]==1) | (dsL[,\"htdb\"]==1), 1,0 )\n\ndsL[,\"condition\"]= ifelse( (dsL[,\"ht\"]==1), \"ht\", \n                        ifelse( (dsL[,\"db\"]==1), \"db\",\n                                ifelse( (dsL[,\"htdb\"]==1), \"htdb\",\"nocase\")))\ntable(dsL$condition)\n\n\n#  create wave indicator \ndsL$wave <- with(dsL, ave(id, id, FUN = seq_along)) \ndsL$wave <- dsL$wave - 1 # to line up with existing way of referring to it\n\n\n# create a year indicator: first measure (round A) taken in 2002\ndsL$year <- 2002 + 2*dsL$wave \n\n# create variable for \"Age in years for the time of the interview\"\ndsL$Age <- dsL$year - dsL$dob \nhead(dsL) \ntable(dsL$wave)\n\n\n## @knitr TweakLong2\n# Diagnosed with hypertension at wave A\ndsL$hptn <- ordered(dsL$hptn, levels = c(0,1),\n                    labels = c(\"No HPTN\",\"Hypertension\"))\n# Diagnosed with diabetes at wave A\ndsL$dbts <- ordered(dsL$dbts, levels = c(0,1),\n                    labels = c(\"No DBTS\",\"Diabetes\"))\n# waves as an ordered factor\ndsL$waveF <- ordered(dsL$wave, levels = c(0:5),\n                     labels = c(\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"))\n#\ndsL$condition <- ordered(dsL$condition, levels = c('ht', 'db', 'htdb', 'nocase'),\n                    labels = c(\"Hypertension\", \"Diabetes\",\"Both\", \"None\"))\n# Sex\ndsL$sex <- ordered(dsL$sex, levels = c(0,1),\n                    labels = c(\"Male\",\"Female\"))\n\nstr(dsL)\n\ntable(dsL$wave)\ntable(dsL$waveF)\n\n\n# saveRDS(object=dsL, file=\"~/GitHub/psy564/Data/Raw/ELSA/ds0_ELSA.rds\", compress=\"xz\") \n\n## @knitr DummyChunck\n#### dsM ####\n\n## @knitr DataFilter\ndsM <- dsL ## dsM descends from dsL \n\n\ntable(dsM$irecall,dsM$wave, useNA=\"ifany\")\n# There are no valid respondes to the focal outcome, so we remove wave 5\n# Wave 0 doesn't not contain observations of interest, so remove wave 0\ndsM <- dplyr::filter(dsM, wave %in% c(1:4))  \n# dsM <- dplyr::select(dsM, id, dob, sex, hptn, dbts, condition, wave, waveF, year, time, Age, irecall)\ndsM <- dplyr::select(dsM, id, dob, age80, sex, edu11, hptn, dbts, condition, evrsmk1A,\n                     chf1A, mi1A, stk1A, wave, waveF, year, time, Age, irecall)\ntable(dsM$irecall,dsM$wave, useNA=\"ifany\")\n# The missing values will complecate some of the modeling so remove for now\n\n\n\n# Selecting individuals into the working dataset\nlength(unique(dsM$id))\ntable(dsM$wave)\ndsM <- dplyr::filter(dsM, (ave(!is.na(irecall), id, FUN = all))) # only complete trajectoies of irecall\nlength(unique(dsM$id))\ntable(dsM$wave)\ndsM <- dsM[dsM$id %in% unique((dsM[dsM$wave==4,c(\"id\",\"wave\")])$id ),] # only who reached 4th wave\nlength(unique(dsM$id))\ntable(dsM$wave)\n\nsampleSize <- 5686 # 5686\nalphaLine <- .0\nalphaPoint <- .0\nalphaLineM <- .08\n\n\n# sampleSize <- 100 # 5686\n# alphaLine <- .0\n# alphaPoint <- .0\n# alphaLineM <- .2\n\n# set data for selection\nsample <- sample(unique(dsM$id),sampleSize) # select only N ids\ndsM <- dplyr::filter(dsM, id %in% sample) # select only N ids\n\n\n## @knitr DummyChunck\n### Basic Graphs  ####\n\n\n## @knitr LoadGraphThemes\npaletteColor4conditions <- c(\"Hypertension\"=\"red\",\n                             \"Diabetes\"=\"blue\",\n                             \"Both\"=\"purple\",\n                             \"None\"=\"grey10\")\n\n\nbaseSize <- 12 # set as the point of further reference\ntheme1 <- ggplot2::theme_bw(base_size=baseSize) +\n  ggplot2::theme(title=ggplot2::element_text(colour=\"gray20\",size = baseSize+1)) +\n  ggplot2::theme(axis.text=ggplot2::element_text(colour=\"gray40\", size=baseSize-2)) +\n  ggplot2::theme(axis.title=ggplot2::element_text(colour=\"gray40\")) +\n  ggplot2::theme(panel.border = ggplot2::element_rect(colour=\"gray80\")) +\n  ggplot2::theme(axis.ticks.length = grid::unit(0, \"cm\")) +\n  ggplot2::theme(text = element_text(size =baseSize+7)) \n\n\n## @knitr CrossSectionDist\n# Cross-sectional view: irecall\np <- ggplot2::ggplot(dsM, aes(y=irecall,x=factor(year), fill=condition))\np <- p + geom_violin( adjust=1, alpha=.4 )\np <- p + scale_y_continuous(limits=c(0,10), breaks=seq(0,10,by=1))\np <- p + scale_fill_manual(values=paletteColor4conditions)\np <- p + geom_boxplot(width=1, fill=NA, color=\"black\", alpha=.5, outlier.colour=\"red\") \np <- p + stat_summary(fun.y=mean, geom=\"point\", fill=\"white\", shape=21, size=4)\np <- p + facet_grid(dbts ~ hptn)\np <- p + theme1\np\n\n\n\n## @knitr CrossSectionCount\n# Cross-sectional view: frequence of irecall\np <- ggplot2::ggplot(dsM, aes(x=factor(year)))\np <- p + scale_y_continuous(breaks=seq(0,6000,by=1000))\np <- p + geom_bar(aes(fill=condition), alpha=.4)\np <- p + facet_grid(dbts ~ hptn)\np <- p + scale_fill_manual(values=paletteColor4conditions)\np <- p + guides(fill = guide_legend(reverse=F, title=\"Diagnosis at A\")) \np <- p + theme1\np\n\n## @knitr CrossSectionCount2\naddmargins(table(dsM$condition, dsM$wave ))\n\n\n\n## @knitr dummyChunk\n####  MODEL 0  ####\n\n## @knitr RunM0\nm0 <- lme4::lmer(irecall ~ 1 + (1 | id), data=dsM, REML=FALSE)# create model object\ndsM$m0  <- predict(m0 ) # stores values predicted by the model\ndisplay(m0 ) # tidy results\n\n## @knitr InspectM0\nmodel <- m0\nmInfo<-summary(model)$AICtab\nmInfo[\"N\"]<- model@devcomp$dims[\"N\"] # number of datapoints, verify\nmInfo[\"p\"]<- model@devcomp$dims[\"p\"] # number of estimated parameters, verify\nmInfo[\"ids\"]<- (summary(model))$ngrps # number of units on level-2, here: individuals\n# mInfo<- c(mInfo, \"modelName\"=modelName)\nmInfo<-data.frame(mInfo) # turn into a dataframe\nmInfo<- plyr::rename(mInfo,replace= c(\"mInfo\"=\"m0\")) # rename variables\nmInfo$Coefficient <- rownames(mInfo) # save index names as a column\nmi0 <- mInfo # create model information  object\nmi0 #  model information\nhead(dsM) # visual check\n\n## @knitr GraphM0\nds <- dplyr::filter(dsM, id %in% sample) # select only N ids\n# head(ds)\np <- ggplot2::ggplot(ds,aes(x=wave, y=irecall))\np <- p + geom_line(aes(group=id), color=\"grey\", alpha=alphaLine)  # individual trajectories\np <- p + geom_point(size=3, shape=21, fill=\"purple\", color=\"black\", alpha=alphaPoint,\n                    position=position_jitter(w=0.0, h=0.4))# cross-section data points\np <- p + geom_line(aes(y=m0, group=id), color=\"royalblue3\", alpha=alphaLineM) # modelled data\np <- p + theme1 \np <- p + scale_x_continuous(limits=c(1,4), breaks=c(1:4)) # X axis\np <- p + scale_y_continuous(limits=c(0,10), \n                            breaks=seq(0,10, by=1)) # Y axis\np <- p + facet_grid(dbts ~ hptn)\np <- p + labs(list(\n  title=\"Does outcome change over time?\", # main title\n  x=\"Wave of measurement\", y=\"Performance on the outcome\")) # axes titles\np <- p + geom_abline(intercept=fixef(m0)[1], slope=0, color=\"red3\")\np\n\n## @knitr dummyChunk\n####  MODEL 1  ####\n\n## @knitr RunM1\nm1 <- lme4::lmer(irecall ~ 1 + time + (1 | id), data=dsM, REML=FALSE)# create model object\ndsM$m1  <- predict(m1 ) # stores values predicted by the model\ndisplay(m1 ) # tidy results\n\n## @knitr InspectM1\nmodel <- m1\nmInfo<-summary(model)$AICtab\nmInfo[\"N\"]<- model@devcomp$dims[\"N\"] # number of datapoints, verify\nmInfo[\"p\"]<- model@devcomp$dims[\"p\"] # number of estimated parameters, verify\nmInfo[\"ids\"]<- (summary(model))$ngrps # number of units on level-2, here: individuals\n# mInfo<- c(mInfo, \"modelName\"=modelName)\nmInfo<-data.frame(mInfo) # turn into a dataframe\nmInfo<- plyr::rename(mInfo,replace= c(\"mInfo\"=\"m1\")) # rename variables\nmInfo$Coefficient <- rownames(mInfo) # save index names as a column\nmi1 <- mInfo # create model information  object\nmi1 #  model information\nhead(dsM) # visual check\n\n## @knitr GraphM1\nds <- dplyr::filter(dsM, id %in% sample) # select only N ids\n# head(ds)\np <- ggplot2::ggplot(ds,aes(x=wave, y=irecall))\np <- p + geom_line(aes(group=id), color=\"grey\", alpha=alphaLine)  # individual trajectories\np <- p + geom_point(size=3, shape=21, fill=\"purple\", color=\"black\", alpha=alphaPoint,\n                    position=position_jitter(w=0.0, h=0.4))# cross-section data points\np <- p + geom_line(aes(y=m1, group=id), color=\"royalblue3\", alpha=alphaLineM) # modelled data\np <- p + theme1 \np <- p + scale_x_continuous(limits=c(1,4), breaks=c(1:4)) # X axis\np <- p + scale_y_continuous(limits=c(0,10), \n                            breaks=seq(0,10, by=1)) # Y axis\np <- p + facet_grid(dbts ~ hptn)\np <- p + labs(list(\n  title=\"Does outcome change over time?\", # main title\n  x=\"Wave of measurement\", y=\"Performance on the outcome\")) # axes titles\np <- p + geom_abline(intercept=fixef(m1)[1], slope=fixef(m1)[2], color=\"red3\")\np\n\n## @knitr dummyChunk\n####  MODEL 2  ####\n\n## @knitr RunM2\nm2 <- lme4::lmer(irecall ~ 1 + time + (1 + time | id), data=dsM, REML=FALSE)# create model object\ndsM$m2  <- predict(m2 ) # stores values predicted by the model\ndisplay(m2 ) # tidy results\n\n## @knitr InspectM2\nmodel <- m2\nmInfo<-summary(model)$AICtab\nmInfo[\"N\"]<- model@devcomp$dims[\"N\"] # number of datapoints, verify\nmInfo[\"p\"]<- model@devcomp$dims[\"p\"] # number of estimated parameters, verify\nmInfo[\"ids\"]<- (summary(model))$ngrps # number of units on level-2, here: individuals\n# mInfo<- c(mInfo, \"modelName\"=modelName)\nmInfo<-data.frame(mInfo) # turn into a dataframe\nmInfo<- plyr::rename(mInfo,replace= c(\"mInfo\"=\"m2\")) # rename variables\nmInfo$Coefficient <- rownames(mInfo) # save index names as a column\nmi2 <- mInfo # create model information  object\nmi2 #  model information\nhead(dsM) # visual check\n\n\n## @knitr GraphM2\nds <- dplyr::filter(dsM, id %in% sample) # select only N ids\n# head(ds)\np <- ggplot2::ggplot(ds,aes(x=wave, y=irecall))\np <- p + geom_line(aes(group=id), color=\"grey\", alpha=alphaLine)  # individual trajectories\np <- p + geom_point(size=3, shape=21, fill=\"purple\", color=\"black\", alpha=alphaPoint,\n                    position=position_jitter(w=0.0, h=0.4))# cross-section data points\np <- p + geom_line(aes(y=m2, group=id), color=\"royalblue3\", alpha=alphaLineM) # modelled data\np <- p + theme1 \np <- p + scale_x_continuous(limits=c(1,4), breaks=c(1:4)) # X axis\np <- p + scale_y_continuous(limits=c(0,10), \n                            breaks=seq(0,10, by=1)) # Y axis\np <- p + facet_grid(dbts ~ hptn)\np <- p + labs(list(\n  title=\"Does outcome change over time?\", # main title\n  x=\"Wave of measurement\", y=\"Performance on the outcome\")) # axes titles\np <- p + geom_abline(intercept=fixef(m2)[1], slope=fixef(m2)[2], color=\"red3\")\np\n\n\n## @knitr dummyChunk\n####  MODEL 3  ####\n\n## @knitr RunM3\nm3 <- lme4::lmer(irecall ~ 1 + time + sex + age80 + edu11 + hptn + dbts + age80:sex + age80:hptn + age80:dbts + sex:hptn + sex:dbts + hptn:dbts + (1 + time | id), data=dsM, REML=FALSE)# create model object\ndsp<- data.frame(getME(model,\"X\")) # get the model frame\ndsp$id<-getME(model,\"flist\")$id # first level grouping factor, individual\ndsp$y<-getME(model,\"y\") # observed response vector\ndsp$m3<- predict(model) # predicted values\ndsM <- merge(x=dsM, y= dsp[,c(\"id\",\"m3\")], by=\"id\" )\n# head(dsp)\ndisplay(m3 ) # tidy results\n\n\n## @knitr InspectM3\nmodel <- m3\nmInfo<-summary(model)$AICtab\nmInfo[\"N\"]<- model@devcomp$dims[\"N\"] # number of datapoints, verify\nmInfo[\"p\"]<- model@devcomp$dims[\"p\"] # number of estimated parameters, verify\nmInfo[\"ids\"]<- (summary(model))$ngrps # number of units on level-2, here: individuals\n# mInfo<- c(mInfo, \"modelName\"=modelName)\nmInfo<-data.frame(mInfo) # turn into a dataframe\nmInfo<- plyr::rename(mInfo,replace= c(\"mInfo\"=\"m3\")) # rename variables\nmInfo$Coefficient <- rownames(mInfo) # save index names as a column\nmi3 <- mInfo # create model information  object\nmi3 #  model information\nhead(dsM) # visual check\n\n\n## @knitr GraphM3\nds <- dplyr::filter(dsM, id %in% sample) # select only N ids\n# head(ds)\np <- ggplot2::ggplot(ds,aes(x=wave, y=irecall))\np <- p + geom_line(aes(group=id), color=\"grey\", alpha=alphaLine)  # individual trajectories\np <- p + geom_point(size=3, shape=21, fill=\"purple\", color=\"black\", alpha=alphaPoint,\n                    position=position_jitter(w=0.0, h=0.4))# cross-section data points\np <- p + geom_line(aes(y=m3, group=id), color=\"royalblue3\", alpha=alphaLineM) # modelled data\np <- p + theme1 \np <- p + scale_x_continuous(limits=c(1,4), breaks=c(1:4)) # X axis\np <- p + scale_y_continuous(limits=c(0,10), \n                            breaks=seq(0,10, by=1)) # Y axis\np <- p + facet_grid(dbts ~ hptn)\np <- p + labs(list(\n  title=\"Does outcome change over time?\", # main title\n  x=\"Wave of measurement\", y=\"Performance on the outcome\")) # axes titles\np <- p + geom_abline(intercept=fixef(m3)[1], slope=fixef(m3)[2], color=\"red3\")\np\n\n\n",
    "created" : 1422863537506.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2562591895",
    "id" : "FE4AC447",
    "lastKnownWriteTime" : 1422644950,
    "path" : "~/GitHub/Diabetes-Tri-Study/Reports/ELSA/ELSA-Unconditional.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}